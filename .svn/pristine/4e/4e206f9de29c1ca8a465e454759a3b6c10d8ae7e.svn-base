var async = require('async');
var uuid = require('node-uuid');
var User = require('../../models/UserModel');
var Booking = require('../../models/booking');
var Insurance = require('../../models/insurance');
var Specialization = require('../../models/specialization');
var Category = require('../../models/category');
var PageModel = require('../../models/pages');
var ChatDialog = require('../../models/chat_dialog');
var ChatDialogHistory = require('../../models/chat_dialog_history');
//var Doctor = require('../../models/doctor');
var Patient = require('../../models/patient');
var Payment = require('../../models/payment');
var Notification = require('../../models/notification');
var Rating = require('../../models/rating');
var Contact = require('../../models/contact');
var request = require('request');
var config = require('../../config');
var nodemailer = require('nodemailer');
var hbs = require('nodemailer-express-handlebars');
var secretKey = config.secret;
var jwt = require('jsonwebtoken');
var mongoose = require('mongoose');
//var fs = require('fs');
//var moment = require('moment');
var randomString = require('randomstring');
var forEach = require('async-foreach').forEach;
var asyncLoop = require('node-async-loop');
var sharp = require('sharp');
var time_ago_in_words = require('time_ago_in_words');
var csv = require('csv-parser');
var Json2csvParser  = require('json2csv').Parser;
var fs = require('fs');
var URL = require('url-parse');
let {AgeFromDateString, AgeFromDate} = require('age-calculator');
var geolib = require('geolib');
require('mongoose-pagination');
var paypal = require('paypal-rest-sdk');
paypal.configure({
    'mode': 'sandbox', //sandbox or live
    'client_id': 'AanCZ_OcTgA0a02bBbL-dBQ9fornDu5TsaP46n2xAfA68sgurn_uxzitFL3Qf3KXLC-Swg-odKj2Dkkt',
    'client_secret': 'EIex-pJURpviCKb6fgwFQK3bk1TGRhOATuQAttX3BekKTxVAN1lnQ3kfVAPrAcW_gtyBFkogTNBGgx2R'
});
// Generic "done" callback. 
function allDone(notAborted, arr) {
    //console.log("done", notAborted, arr);
}
//var transporter = nodemailer.createTransport('smtps://' + config.email.user + ':' + config.email.pass + '@' + config.email.host);
//transporter.use('compile', hbs({viewPath: 'templates', extName: '.hbs'}));
var transporter = nodemailer.createTransport({
    service: 'gmail',
    auth: {
        user: 'apptestapp4@gmail.com',
        pass: 'apptest@1234'
    }
});
transporter.use('compile', hbs({viewPath: 'templates', extName: '.hbs'}));
function createToken(user) {
    var tokenData = {
        id: user._id,
        email: user.email,
        role: user.role, 
        name: user.name
    };
    var token = jwt.sign(tokenData, secretKey, {
        expiresIn: "5 days"
    });
    return token;
}
function randomPassswordCreate(length) {
    var chars = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
    var result = '';
    for (var i = length; i > 0; --i) result += chars[Math.round(Math.random() * (chars.length - 1))];
    return result;
}
function findObjectByKey(array, key, value) {
    for (var i = 0; i < array.length; i++) {
        if (array[i][key] === value) {
            return array[i];
        }
    }
    return null;
}
/**
* Time ago
*/
function time_ago(time) {
    switch (typeof time) {
        case 'number':
        break;
        case 'string':
        time = +new Date(time);
        break;
        case 'object':
        if (time.constructor === Date) time = time.getTime();
        break;
        default:
        time = +new Date();
    }
    var time_formats = [
        [60, 'seconds', 1], // 60
        [120, '1 minute ago', '1 minute from now'], // 60*2
        [3600, 'minutes', 60], // 60*60, 60
        [7200, '1 hour ago', '1 hour from now'], // 60*60*2
        [86400, 'hours', 3600], // 60*60*24, 60*60
        [172800, 'Yesterday', 'Tomorrow'], // 60*60*24*2
        [604800, 'days', 86400], // 60*60*24*7, 60*60*24
        [1209600, 'Last week', 'Next week'], // 60*60*24*7*4*2
        [2419200, 'weeks', 604800], // 60*60*24*7*4, 60*60*24*7
        [4838400, 'Last month', 'Next month'], // 60*60*24*7*4*2
        [29030400, 'months', 2419200], // 60*60*24*7*4*12, 60*60*24*7*4
        [58060800, 'Last year', 'Next year'], // 60*60*24*7*4*12*2
        [2903040000, 'years', 29030400], // 60*60*24*7*4*12*100, 60*60*24*7*4*12
        [5806080000, 'Last century', 'Next century'], // 60*60*24*7*4*12*100*2
        [58060800000, 'centuries', 2903040000] // 60*60*24*7*4*12*100*20, 60*60*24*7*4*12*100
    ];
    var seconds = (+new Date() - time) / 1000,
    token = 'ago',
    list_choice = 1;
    if (seconds == 0) {
        return 'Just now'
    }
    if (seconds < 0) {
        seconds = Math.abs(seconds);
        token = 'from now';
        list_choice = 2;
    }
    var i = 0,
    format;
    while (format = time_formats[i++])
    if (seconds < format[0]) {
        if (typeof format[2] == 'string')
        return format[list_choice];
        else
        return Math.floor(seconds / format[2]) + ' ' + format[1] + ' ' + token;
    }
    return time;
}
function checkValue(value,arr){
    var status = 'Not exist';
    for(var i=0; i<arr.length; i++){
        var name = arr[i].doctors_clinic;
        if(name == value){
            status = 'Exist';
            break;
        }
    }
    return status;
}
/**
* Sumn of the number
*/
function getSum(total, num) {
    return total + num;
}
/**
* create mail template
*/
function createTemplate(html_ontent){
    var fulldate = new Date();
    var fullYear = fulldate.getFullYear();
    //content
    var all_content="<!DOCTYPE html PUBLIC '-//W3C//DTD HTML 4.01 Transitional//EN' 'http://www.w3.org/TR/html4/loose.dtd'><html><head><meta http-equiv='Content-Type' content='text/html; charset=UTF-8'><title>Email Template</title><meta name='viewport' content='width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no' /><link href='http://fonts.googleapis.com/css?family=PT+Sans+Narrow:400,700' rel='stylesheet' type='text/css'><style type='text/css'> p { font-family: 'PT Sans Narrow',sans-serif; font-size: 17px; color: #4F4F4F; margin: 0; line-height: 21px; }a { color: #0099FF; text-decoration: none; }a:hover { text-decoration: underline; }h1 { font-family: 'PT Sans Narrow',sans-serif; color: #121212; font-size: 40px; font-weight: 700; margin: 0; }h2 { font-family: 'PT Sans Narrow',sans-serif; color: #121212; font-size: 30px; font-weight: 400; margin: 0; }h3 { font-family: 'PT Sans Narrow',sans-serif; color: #000; font-size: 29px; font-weight: 400; margin: 0; }h4 { font-family: 'PT Sans Narrow',sans-serif; color: #fff; font-size: 46px; font-weight: 400; margin: 0; }h5 { font-family: 'PT Sans Narrow',sans-serif; color: #121212; font-size: 20px; font-weight: 400; margin: 0; }h6 { font-family: Arial, Helvetica, sans-serif; color: #616161; font-size: 35px; font-weight: 400; margin: 0; }.button{display: inline-block; padding: 13px 41px 12px 40px;color: #ffffff;font-family:sans-serif;font-size: 16px;cursor: pointer;border: #fff 2px solid;background-color:#09cef8;}.button:hover{background-color: #09cef8;text-decoration:none;border: #fff 2px solid;color:#fff; }</style></head><body bgcolor='#f0f0f0'><div style='width: 650px; margin: 0 auto;'> <div style='background:#09cef8; overflow: hidden; padding: 15px 10px 12px 30px;'> <img src='http://162.243.110.92/aquare/aqare-logo.png' style='float: left; width: 165px'> <h4 style='text-align: center; padding-top: 53px;'>Aqare</h4> </div> <div style='background-color:#e3eaf0; overflow: hidden; padding: 15px 10px 40px 40px;'> "+html_ontent+" </div> </div></body></html>";
    //return
    return all_content;
} // end of email template code block
/**
* Send mail to multiple user
**/
function sendMailToMultipleUsers(userArray){
    if(userArray!='' && userArray!=null && userArray!=undefined){
        for(var i=0;i<userArray.length;i++){
            var mailOptions = {
                from: config.EMAIL_ADDRESS.DEFAULT_FROM_EMAIL,
                to: userArray[i].email_id,
                subject: userArray[i].subject,  
                html: createTemplate(userArray[i].mailContent)
            };
            transporter.sendMail(mailOptions, function(error, info){
                if (error) {
                    console.log(error);
                } else {
                    console.log('Email sent: ' + info.response);
                }
            });
        }
    }
}
var UserMethods = {
    /**
    * Email check
    */
    check_email: function (userData, callback) {
        User.findOne({email: userData.email},function (err, user) {    
            if(user){
                //user already exist                
                callback({success: true, message: 'This email id is already used.', data:user.email });
            } else {
                callback({success: false, message: 'This email is not used till now.', data:userData.email});
            }
        });
    },
    /**
    * verify email
    */
    verify_email: function (userData, callback) {
        User.count({email: userData.email, _id: userData.token}, function (err, cnt) {
            if (cnt > 0) {
                var conditions = {email: userData.email, _id: userData.token},
                fields = {email_verify: 'yes'},
                options = {multi: true};
                User.update(conditions, fields, options, function (err, affected) {
                    if (err) {
                        callback({success: false, message: "Some internal error has occurred", err: err});
                    } else {
                        callback({success: true, message: 'Your Email successfully verified'});
                    }
                });
            } else {
                callback({success: false, message: 'your email verification expired'});
            }
        });
    },
    /**
    * Registration
    */
    registerUser: function (userData, callback) {      
        async.waterfall([
            function(nextcb){
                var errMsg = "";
                if(!userData.name){
                    errMsg = "Name is required";
                }
                nextcb(null, errMsg);
            },
            function (cErr,nextcb) {
                var errMsg = "";
                if( cErr != ""){
                    nextcb(null, cErr);
                } else {
                    if (!userData.email) {
                        errMsg = "Email is required";
                        nextcb(null, errMsg);
                    } else {
                        var email = userData.email.toLowerCase();
                        User.count({email: email}, function (err, cnt) {
                            if (err) {
                                nextcb(err);
                            } else {
                                if (cnt > 0) {
                                    errMsg = "Email Already Exists";
                                }
                                nextcb(null, errMsg);
                            }
                        });
                    }
                }
            },
            function (cErr, nextcb) {
                var errMsg = "";
                if (cErr != "") {
                    nextcb(null, cErr);
                } else {                    
                    if (userData.role == 'patient' && !userData.insurance) {
                        var errMsg = "Insurance is required";
                        nextcb(null, errMsg);
                    } else {
                        nextcb(null, errMsg);
                    }                       
                }
            },
            function (cErr, nextcb) {
                var errMsg = "";
                if (cErr != "") {
                    nextcb(null, cErr);
                } else {
                    if (typeof (userData.dob) === 'undefined' || userData.dob === "") {
                        var errMsg = "DOB is required";
                        nextcb(null, errMsg);
                    } else {
                        nextcb(null, errMsg);
                    }
                }
            },
            function (cErr, nextcb) {
                var errMsg = "";
                if (cErr != "") {
                    nextcb(null, cErr);
                } else {
                    if (typeof (userData.password) == "undefined" || userData.password == "") {
                        errMsg = "Password can't be blank";
                    } else if ((userData.password.length) < 6) {
                        errMsg = "Password should be at least six character long";
                    }
                    nextcb(null, errMsg);
                }
            },
            function (cErr, nextcb) {
                if (cErr != "") {
                    nextcb(null, cErr);
                } else {
                    //userData.dob = userData.dob.toUTCString();
                    //var nat = userData.insurance;
                    //userData.nationality = nat.charAt(0).toUpperCase() + nat.slice(1);
                    if (userData.insurance != '' && userData.insurance != null && userData.insurance != undefined) {
                        userData.insurance = userData.insurance;
                    }
                    userData.email = userData.email.toLowerCase();
                    userData.quick_blox_pass = randomPassswordCreate(12);
                    var user = new User(userData);
                    user.save(function (err, res) {
                        if (err) {
                            nextcb(err);
                        } else {                            
                            var link = new URL(config.__site_url + 'api/verify_email?email=' + userData.email + '&token=' + res._id);
                            var base_url = config.__site_url;
                            //send mail with options
                            transporter.sendMail({
                                from: '"Aqare"',
                                to: userData.email,
                                subject: 'Email Verification',
                                template: 'email_template',
                                context: {
                                    name: userData.firstname,
                                    url: link,
                                    base_url: base_url
                                }
                            }, function (err, response) {
                                if (err) {
                                    console.log(err);
                                } else {
                                    console.log(response);
                                }
                            });
                            callback({
                                success: true,
                                message: "Successfully resgistered",
                                quickblox_pass:res.quick_blox_pass,
                                _user:res._id
                            });
                        }
                    });
                }
            }
        ], function (err, validationError) {
            console.log(err);
            if (err) {
                callback({success: false, message: "some internal error has occurred", err: err});
            } else if (validationError != "") {
                callback({success: false, message: validationError});
            } else {
            }
        });
    },    
    /**
    * Login
    */
    doLogin: function (reqData, userAgents, callback) {
        if (typeof (reqData.email) == "undefined" || reqData.email == "") {
            callback({success: false, message: "please provide email"});
        } else if (typeof (reqData.password) == "undefined" || reqData.password == "") {
            callback({success: false, message: "please provide password"});
        } else {
            User.findOne({email: reqData.email,account_active:'yes'})
            .select('firstname profile_pic email mobile password email_verify quick_blox_pass account_active deactivatedBy role name profile_flag')
            .exec(function (err, user) {
                if (err) {
                    callback({success: false, message: "some internal error has occurred", err: err});
                } else {
                    if (!user) {
                        callback({success: false, message: "Invalid Email"});
                    } else {
                        console.log(user);
                        if (!user.comparePassword(reqData.password)) {
                            callback({success: false, message: "invalid password"});
                        } else if (user.email_verify == 'no') {
                            callback({success: false, message: "Please verify your email id and activate your account"});
                        } else {
                            var UAParser = require('ua-parser-js');
                            var parser = new UAParser();
                            //console.log(ua_str);
                            //var ua = req.headers['user-agent'];     // user-agent header from an HTTP request
                            var uaObj = parser.setUA(userAgents);
                            //console.log(uaObj);
                            //console.log(uaObj.getOS());
                            var user_agent = uaObj.getResult();
                            //console.log(typeof(user_agent));
                            //var hasnewpassword =  bcrypt.hashSync(reqData.password);
                            //=========== Updating user record ===========//
                            var conditions = {_id: user._id};
                            if(!reqData.device_token){
                                var fields = {
                                    user_agent: user_agent,
                                    last_login: Date.now()
                                };
                            } else {
                                var fields = {
                                    user_agent: user_agent,
                                    device_token: reqData.device_token,
                                    last_login: Date.now()
                                };
                            }
                            var options = {upsert: false};
                            User.update(conditions, fields, options, function (err, affected) {
                                if (err) {
                                    callback({success: false, message: "some internal error has occurred", err: err});
                                } else {
                                    var token = createToken(user);
                                    callback({
                                        success: true,
                                        message: "Login success",
                                        userid: user._id,
                                        name: user.name,
                                        mobile: user.mobile,
                                        profile_pic: user.profile_pic,
                                        token: token,
                                        email:user.email,
                                        quickblox_pass:user.quick_blox_pass,
                                        account_active:user.account_active,
                                        deactivatedBy:user.deactivatedBy,
                                        user_type:user.role,
                                        profile_flag:user.profile_flag,
                                        createdAt:user.createdAt
                                    });
                                }
                            });
                        }
                    }
                }
            });
        }
    },
    /**
    * List of insurence
    */
    getInsurence:function(callback){
        Insurance.find({},function (err, all_insurance) {
            console.log(all_insurance);
            if (err) {
                callback({success: false, message:"Unable to get the insurance", error: err});                
            }else{
                callback({success: true, message:"Success", data: all_insurance});               
            }
        });       
    },
    /**
    * User profile details
    */
    profileDetails: function (userid, callback) {
        var allClinics = [];
        async.waterfall([
            details,
            rating                
        ], function (error, response) {
            if(error){
                //callback                                
                callback({success: false, message:error});
            }else{  
                //callback                                  
                callback({success: true, data:response});
            }
        });
        function details (callback) {
            User.findOne({_id: userid,account_active:"yes"}).exec(function (err, result) {                
                if (err) {
                    callback(err);
                }else {
                    if (!result.dob) {
                        var age = '';
                        var dob = '';
                    } else {                                  
                        var date = new Date(result.dob);                            
                    }
                    if(result.doctors_clinics =='' || result.doctors_clinics == null || result.doctors_clinics==undefined){
                        result.doctors_clinics = ' ';
                    }
                    asyncLoop(result.doctors_clinics, function (item, next){
                        if(item.doctors_clinic !='' || item.doctors_clinic != null || item.doctors_clinic != undefined){
                            User.findById(item.doctors_clinic,function(error,clinic){
                                if(!error){
                                    if(clinic){
                                        var clinicData = {clinic_id:clinic._id, clinic_name:clinic.name, city:clinic.city,country:clinic.country, mobile:clinic.mobile, address:clinic.profile.address, clinic_prof_pic:clinic.profile_pic, year_exp:clinic.profile.yearexp,working_hours:item.hours}
                                        allClinics.push(clinicData);
                                    }
                                }                      
                                next();
                            });
                        }    
                    }, function (){
                        var userObj = {
                            "userid": result._id,
                            "name": result.name,
                            "email": result.email,
                            "gender":result.gender,
                            "mobile":result.mobile,
                            "dob": date,
                            "profile_pic": result.profile_pic,
                            "city": result.city,
                            "role": result.role,
                            "country": result.country,
                            "insurance":result.insurance,
                            "bloodgroup":result.bloodgroup,
                            "height":result.height,
                            "weight":result.weight,
                            "about":result.profile.about,
                            "allaffiliations":result.profile.allaffiliations,
                            "registrationcouncil":result.profile.registrationcouncil,
                            "regno":result.profile.regno,
                            "specialization":result.profile.specialization,
                            "yearofreg":result.profile.yearofreg,
                            "yearexp":result.profile.yearexp,
                            "profiletype":result.profile.profiletype,
                            "address":result.profile.address,
                            "services":result.profile.services,
                            "timings":result.profile.timings,
                            "consultation_fee": result.profile.consultation_fee,
                        };
                        var responseData={doctor_details:userObj,clinics:allClinics};
                        callback(null, responseData);                            
                    });                             
                }
            });   
        }
        function rating (responseData, callback) {
            var avg_rating = 0;
            var allData =[];
            Rating.find({to_id: userid}).exec(function(err,ratings){
                if(err){
                    callback(err);
                }
                if(ratings.length > 0){                                            
                    for (var i = 0; i < ratings.length; i++) {
                        allData.push(ratings[i].avg_rating);
                    }
                    var sum = allData.reduce(getSum);
                    var count = allData.length;
                    avg_rating = (sum / count); 
                }
                responseData['doctor_details'].rating = avg_rating;
                callback(null, responseData);           
            });                
        }     
    },
    /**
    * Forgot password
    */
    forgotPass: function (req_data, callback) {
        async.waterfall([
            function (nextcb) {
                var customErr = {
                    message: ""
                };
                User.findOne({email: req_data.email})
                .exec(function (err, user) {
                    if (err) {
                        nextcb(err);
                    } else {
                        if (!user) {
                            customErr.message = "Invalid Email-id";
                        }
                        nextcb(null, customErr, user);
                    }
                });
            },
            function (cError, user, nextcb) {
                var data = {};
                var customErr = {
                    message: ""
                };
                if (cError.message == ""){
                    var randomString = require('randomstring');
                    var new_password = randomString.generate({length: 6, charset: 'alphanumeric'});
                    user.password = new_password;
                    user.save(function (err) {
                        if (err) {
                            nextcb(err);
                        }else{
                            data.success = true;
                            data.message = "password changed";
                            if (config.dev_mode) {
                                data.new_pass = new_password;
                            }
                            var base_url = config.__site_url;                            
                            // setup e-mail data with unicode symbols 
                            var mailOptions = {
                                from: '"Aqare" <noreply@gmail.com>',
                                to: user.email,
                                subject: 'Aqare Password Recovery',
                                template: 'forgot_password',
                                context: {
                                    name: user.name,
                                    new_pass:new_password,
                                    base_url: base_url
                                }
                            };
                            // send mail with defined transport object 
                            transporter.sendMail(mailOptions, function (error, info) {
                                if (error) {
                                    //console.log('Message not sent: ' + error);
                                    nextcb(error);
                                }else{
                                    data.mailresponse = info.response;
                                    nextcb(null, customErr, data);
                                    console.log('Message sent: ' + info.response);
                                }
                            });
                            //end of sent mail
                        }
                    });
                }else {
                    customErr.message = cError.message;
                    nextcb(null, customErr, data);
                }
            }
        ], function (err, cError, data) {
            if (err) {
                callback({success: false, message: "some internal error has occurred", err: err});
            } else if (cError.message != "") {
                callback({success: false, message: cError.message});
            } else {
                callback(data);
            }
        });
    },
    /**
    * Upload profile picture for user(i.e patient, doctor, clinic)
    */
    update_profilepic: function(userid, fileData, callback){
        if(!userid){
            callback({success: false, message: "userId is required"});
        } else {
            console.log(fileData);
            if(!fileData){
                callback({success: false, message: "No file selected"});
            } else {
                // The name of the input field (i.e. "profile_pic") is used to retrieve the uploaded file
                var profileImage = fileData.profile_pic;
                //var ext = profileImage.name.slice(profileImage.name.lastIndexOf('.'));
                var ext = '.jpg';
                var fileName = Date.now() + ext;
                var imagePath = 'public/uploads/profilepic/'+fileName;
                var profileimageUrl = config.__site_url + 'uploads/profilepic/' + fileName;
                // mv() method to place the file somewhere on your server
                profileImage.mv(imagePath, function(err) {
                    if (err){
                        callback({success: false, message: "File uploading error", err: err});
                    } else {
                        User.update({_id : userid}, { $set: { profile_pic: profileimageUrl }}, function (err, user) {
                            if (err) {
                                callback({success: false, message: "some error occurred", err: err});
                            } else {
                                callback({
                                    success: true,
                                    message: "Image updated successlully",
                                    profimage:profileimageUrl
                                });
                            }
                        });
                    }
                });
            }
        }
    },
    /**
    * List of specialization
    */
    listSpecialization:function(callback){
        Specialization.find({},function (err, list_of_specialization) {
            console.log(list_of_specialization);
            if (err) {
                callback({success: false, message:"Unable to get the specialization", error: err});                
            }else{
                callback({success: true, message:"Success", data: list_of_specialization});               
            }
        });       
    },
    /**
    * Upload document for doctor and clinic
    */
    image_upload: function(userid, req, fileData, callback){
        console.log("hi");
        console.log(req);
        console.log(fileData);
        if(!userid){
            callback({success: false, message: "userId is required"});
        } else {
            if(!fileData){
                callback({success: false, message: "No file selected"});
            } else {
                //console.log(fileData);
                // The name of the input field (i.e. "profile_pic") is used to retrieve the uploaded file
                //var profileImage = fileData.doc_experience;
                var updateData = {};           
                //var ext = profileImage.name.slice(profileImage.name.lastIndexOf('.'));
                var ext = '.jpg';
                var fileName = Date.now() + ext;
                var imagePath = 'public/uploads/profilepic/'+fileName;
                var profileimageUrl = config.__site_url + 'uploads/profilepic/' + fileName;
                //condole.log(fileData.doc_registration);
                if(req =='doc_experience'){
                    var profileImage = fileData.doc_experience;
                    updateData.doc_experience = profileimageUrl;
                }
                if(req =='doc_registration'){
                    var profileImage = fileData.doc_registration;
                    updateData.doc_registration = profileimageUrl;
                }
                if(req =='doc_qualifications'){
                    var profileImage = fileData.doc_qualifications;
                    updateData.doc_qualifications = profileimageUrl;
                }
                if(req =='doc_id'){
                    var profileImage = fileData.doc_id;
                    updateData.doc_id = profileimageUrl;
                }
                if(req =='doc_clinicreg'){
                    var profileImage = fileData.doc_clinicreg;
                    updateData.doc_clinicreg = profileimageUrl;
                }
                if(req =='doc_ownerproof'){
                    var profileImage = fileData.doc_ownerproof;
                    updateData.doc_ownerproof = profileimageUrl;
                }
                console.log(profileImage);
                // mv() method to place the file somewhere on your server
                profileImage.mv(imagePath, function(err) {
                    if (err){
                        callback({success: false, message: "File uploading error", err: err});
                    } else {
                        //User.update({_id : userid}, { $set: { doc_experience: profileimageUrl }}, function (err, user) {
                        User.update({_id : userid}, { $set: updateData}, function (err, user) {    
                            if (err) {
                                callback({success: false, message: "some error occurred", err: err});
                            } else {
                                callback({
                                    success: true,
                                    message: "Image updated successlully",
                                    id: userid,
                                    image: profileimageUrl
                                });
                            }
                        });
                    }
                });
            }
        }
    },
    /**
    * Update user data on profile page
    */
    update_user: function (userid, userdata, callback) {
        console.log(userdata);
        if(!userid){
            callback({success: false, message: "userId is required"});
        }else{
            var str = {};        
            for (var attributename in userdata) {
                if(userdata[attributename] == "" || userdata[attributename] == "id"){
                    //
                } else {
                    str[attributename] = userdata[attributename];
                }
            }
            var conditions = {_id: userid},            
            options = {upsert: false};            
            User.update(conditions, str, options,function(err, tank){    
                if (err) {
                    callback({success: false, message: "some error occurred", err: err});
                } else {
                    callback({success: true, message: "User updated successlully", userid: userid});
                }
            });
        }
    },
    /**
    * Life style and medical profile
    */
    lifestyle_and_medical_profile_details: function (userid, callback) {
        User.findOne({_id: userid,account_active:"yes"})
        .select('allergies chronic_illness what_allergies medicinescrnt medicinespast injuries surgeries cigarettes_smoke_per_day frequently_consume_alcohol active_daily_lifestyle diet_generally_have profession_you_in')
        .exec(function (err, result) {                
            if (err) {
                callback({success: false, err: err});
            }else {
                if(!result) {
                    callback({success: false, message: "This user does not exist"});
                } else {
                    //console.log(result);
                    var userObj = {
                        "userid": result._id,
                        "allergies":result.allergies,
                        "chronic_illness": result.chronic_illness,
                        "what_allergies": result.what_allergies,
                        "medicinescrnt": result.medicinescrnt,
                        "medicinespast": result.medicinespast,
                        "injuries": result.injuries,
                        "surgeries": result.surgeries,
                        "cigarettes_smoke_per_day":result.cigarettes_smoke_per_day,
                        "frequently_consume_alcohol":result.frequently_consume_alcohol,
                        "active_daily_lifestyle": result.active_daily_lifestyle,
                        "diet_generally_have": result.diet_generally_have,
                        "profession_you_in": result.profession_you_in
                    };
                    callback({success: true, data: userObj});                  
                } 
            }
        });
    },
    /**
    * Update life style and medical profile
    */
    update_lifestyle_and_medical_profile_details: function (userid, userdata, callback) {        
        if(!userid){
            callback({success: false, message: "userId is required"});
        }else{                                            
            User.findByIdAndUpdate(userid, { $set: userdata}, function (err, tank) {
                if (err) {
                    callback({success: false, message: "some error occurred", err: err});
                } else {
                    callback({success: true, message: "Updated successlully", userid: userid});
                }
            });
        }
    },
    /**
    * Change password
    */
    changePassword:function(userid, req_data, callback) {
        if(!req_data.password){
            callback({success: false, message: "Please provide password"});
        } else {
            User.findById(userid,'password').exec(function(err, user){
                user.password = req_data.password;
                user.save(function(err, res){
                    if(err){                                               
                        callback({success: false, message: err});
                    } else {
                        var message = '';                       
                        message = "Password changed successfully.Now you can login with your new password.";                        
                        callback({success: true, message: message,data:res});
                    }
                });
            });
        }     
    },
    /**
    * Save profile for clinic and doctor
    */
    profile_doctor_clinic:function(userid, req, callback) {        
        var str = {};
        for (var attributename in req) {
            if(req[attributename] == "" || req[attributename] == "id"){
                //
            } else {
                str[attributename] = req[attributename];
            }
        }
        str['profile_flag'] = 'yes'; 
        var conditions = {_id: userid},            
        options = {upsert: false};
        User.findOne({_id: userid, profile_flag: "yes"},function (err, data) {
            console.log(data);
            if(data){
                //profile already saved                
                callback({success: false, message: "Profile alredy saved.", profile_flag:data});
            }else{                
                User.update(conditions, str, options,function(err, profiledata){                    
                    if(err){                                               
                        callback({success: false, message: err});
                    } else {
                        User.findOne({_id: userid},function (err, profdata) {
                            if(err){
                                //callback
                                callback({success: false, message: err});
                            }else{
                                var message = '';                       
                                message = "Profile saved successfully.";   
                                //profile data
                                var profData = {
                                    about: profdata.profile.about,
                                    allaffiliations: profdata.profile.allaffiliations,
                                    registrationcouncil: profdata.profile.registrationcouncil,
                                    regno: profdata.profile.regno,
                                    specialization: profdata.profile.specialization,
                                    yearofreg: profdata.profile.yearofreg,
                                    yearexp: profdata.profile.yearexp,
                                    profiletype: profdata.profile.profiletype,
                                    address: profdata.profile.address,
                                    services: profdata.profile.services,
                                    timings: profdata.profile.timings,
                                    profile_flag: profdata.profile_flag,
                                    consultation_fee: profdata.consultation_fee
                                }
                                //callback
                                callback({success: true, message: message, data:profData});
                            }
                        });                     
                    }
                });
            }    
        });                         
    },
    /**
    * Doctor details 
    */
    doctorDetails: function (userid, callback) {
        async.waterfall([
            details,
            ratingDetials                
        ], function (error, message, response) {
            if(error){
                //callback                                
                callback({success: false, message:error});
            }else{  
                //callback                                  
                callback({success: true, message: message, data:response});
            }
        });
        function details (callback) {
            User.findOne({_id: userid,role:'doctor'})
            .select('name profile_pic mobile profile.specialization profile.services profile.timings profile.about profile.yearexp profile.address')
            .exec(function (err, result) {                
                if (err) {
                    callback(err);
                }
                var doctorObj = {
                    "userid": result._id,                            
                    "name": result.name,
                    "mobile": result.mobile, 
                    "address": result.profile.address,
                    "city": result.city, 
                    "country": result.country,                           
                    "profile_pic": result.profile_pic,
                    "specialization": result.profile.specialization,
                    "services": result.profile.services,
                    "timings": result.profile.timings,
                    "about": result.profile.about,
                    "yearexp": result.profile.yearexp
                };            
                callback(null, doctorObj);
            });        
        }
        function ratingDetials (doctorObj, callback) {
            var avg_rating = 0;
            var allData =[];
            Rating.find({to_id: userid})
            .populate({
                'path': 'from_id',
                'select': 'name profile_pic'
            })
            .exec(function(err,ratings){
                if(err){
                    callback(err);
                }
                if(ratings.length > 0){                                            
                    for (var i = 0; i < ratings.length; i++) {
                        allData.push(ratings[i].avg_rating);
                    }
                    var sum = allData.reduce(getSum);
                    var count = allData.length;
                    avg_rating = (sum / count); 
                }
                doctorObj.rating = avg_rating;   
                doctorObj.all_users = ratings;          
                callback(null, doctorObj);           
            });                
        } 
    },
    /**
    *  Doctor find clinics
    */
    doctor_find_clinics:function(userData, userid,callback){
        var clinic_added_by_me = [];
        if(!userid){
            callback({success:false,message:"userID is required"});
        }else{
            //doctor user
            var addedClinic = userid;
            async.waterfall([
                function(nextcb){                 
                    User.findById(userid,function(err,loggedinUser){
                        if(err){
                            callback({success:false,error:err});
                        } else {
                            if(loggedinUser){
                                if(loggedinUser.doctors_clinics != '' && loggedinUser.doctors_clinics != undefined && loggedinUser.doctors_clinics != null){
                                    loggedinUser.doctors_clinics.forEach(function (res, index) {
                                        clinic_added_by_me.push(res.doctors_clinic)
                                    });
                                }    
                                var cond = [{ _id: {$nin : addedClinic}},{role:"clinic"},{account_active:"yes"},{email_verify:"yes"}];
                                if(searchData.location) {
                                    cond.push({'profile.address':searchData.location});
                                }                                
                                if(searchData.city) {
                                    var regex = new RegExp(["", searchData.city].join(""), "i");
                                    cond.push({city:regex});
                                }
                                if(searchData.country) {
                                    var regex = new RegExp(["", searchData.country].join(""), "i");
                                    cond.push({country:regex});
                                } 
                                if(searchData.name){
                                    var regex = new RegExp(["^", searchData.name].join(""), "i");
                                    cond.push({name: regex});    
                                }
                                console.log("COND:",cond);
                                var resultSet = [];
                                var page = (pageno)?parseInt(pageno):1;
                                var limit = 15;
                                console.log("Page====>",page);
                                User.find({$and: cond})
                                .paginate(page, limit)
                                .exec(function(err,users){
                                    if(err){
                                        callback({success:false,error:err});
                                    } else {
                                        async.each(users,function(user,cb){
                                            //init
                                            var distance=0;
                                            //Distance calculation using Geolib v2.0.21
                                            if(loggedinUser.latitude && loggedinUser.longitude && user.latitude && user.longitude) {
                                                var dist = geolib.getDistance(
                                                    {latitude: loggedinUser.latitude, longitude: loggedinUser.longitude},
                                                    {latitude: user.latitude, longitude: user.longitude}
                                                );
                                                distance = geolib.convertUnit('km', dist);
                                            }       
                                            //profile picture
                                            var dp = (!user.profile_pic)?null:user.profile_pic;
                                            //check distance
                                            if(searchData.distance){
                                                if(distance <= searchData.distance){
                                                    if (clinic_added_by_me.includes(''+user._id+'')) {
                                                        //do nothing
                                                    }else{
                                                        resultSet.push({
                                                            "userid": user._id,
                                                            "name": user.name,
                                                            "mobile": user.mobile,
                                                            "address": user.profile.address,
                                                            "city": user.city,
                                                            "country": user.country,
                                                            "profile_pic": dp,
                                                            "about":user.about,
                                                            "distance": Math.round( distance )
                                                        })
                                                    }    
                                                } 
                                            } else {
                                                if (clinic_added_by_me.includes(''+user._id+'')) {
                                                    //do nothing
                                                }else{
                                                    resultSet.push({
                                                        "userid": user._id,
                                                        "name": user.name,
                                                        "mobile": user.mobile,
                                                        "address": user.profile.address,
                                                        "city": user.city,
                                                        "country": user.country,
                                                        "profile_pic": dp,
                                                        "about":user.about,
                                                        "distance": Math.round( distance )
                                                    })
                                                }    
                                            }
                                            cb(null,resultSet);  
                                        },function(err){
                                            if(err){
                                                callback({success: false,status:config.status.SERVER_ERROR, err: err});
                                            }else{
                                                callback({success: true,status:config.status.OK, users: resultSet});          
                                            } 
                                        }) //end of async each
                                    }
                                })
                            } else {
                                callback({success:false,message:"This user does not exist"});
                            }
                        }
                    })
                }
            ],function (error, resultSet) {
                if (error) { 
                    callback({success: false, err:error});
                }
                callback({success: true, data: resultSet});
            })                
        }    
    },
    /**
    * doctor add clinics
    */
    /*doctor_add_clinics:function(data, userData, callback){
        //check user id
        if(!data.id){
            callback({success: false, message: "UserID is required"});
        } else {            
            //check friend id
            if(userData){
                var new_id = mongoose.Types.ObjectId();                
                var updateData = {id:new_id, doctors_clinic:userData.user_id, hours:userData.hours}; 
            }                          
            //update user data
            User.update({_id:data.id}, { $push: {"doctors_clinics":updateData}}, function (err, res) {
                if (err) {
                    callback({success: false, message: "some error occurred", err: err});
                } else {
                    User.findOne({_id: data.id}).exec(function(err, result){
                        var pushTitle ='Become an associate';                            
                        var pushContent = data.role +' '+data.name+' sent a request to become an associate with you';
                        var notificationObject = new Notification({
                            event_id:new_id,
                            from_id:data.id,
                            to_id:userData.user_id,
                            message:pushContent,
                            subject:pushTitle                
                        });
                        notificationObject.save(function(notificationSaveError, notificationSaveData){
                            if(notificationSaveData){                                           
                                request.post({
                                    uri: config.PUSH_NOTIFICATION.URL,
                                    headers: {
                                        "Authorization": "key=" + config.PUSH_NOTIFICATION.API_KEY,
                                        "Content-Type": "application/json"
                                    },
                                    body: {
                                        "notification":{
                                            "title":pushTitle,
                                            "body":pushContent,
                                            "sound":"default",
                                            "click_action":"FCM_PLUGIN_ACTIVITY",
                                            "icon":"fcm_push_icon",
                                            "color":"#91be00"
                                        },
                                        "data":{
                                            "page_name":"notification",
                                            "notification_id":notificationSaveData._id,
                                            "post_id":new_id
                                        },
                                        "to":result.device_token,
                                        "priority":"high",
                                        "restricted_package_name":""
                                    },
                                    json: true
                                }, function (err, response, body) {                                     
                                    callback({success: true, message: "New associate added successfully."});
                                }); //end push notification
                            }
                        });
                    });
                    //callback({success: true, message: "Clinic is added by doctor", userid: userid});
                }
            });               
        }
    },*/
    /**
    *  Clinic find doctors
    */
    clinic_find_doctors:function(searchData, user_role, userid, pageno, callback){ 
        console.log(user_role);      
        //init
        var doctors_added_by_me = [];
        if(!userid){
            callback({success:false,message:"userID is required"});
        }else{
            var addedDoctor = userid;
            async.waterfall([
                function(nextcb){    
                    User.findById(userid,function(err,loggedinUser){
                        if(err){
                            callback({success:false,error:err});
                        } else {
                            if(loggedinUser){                                
                                if(loggedinUser.doctors_clinics != '' && loggedinUser.doctors_clinics != undefined && loggedinUser.doctors_clinics != null){
                                    loggedinUser.doctors_clinics.forEach(function (res, index) {
                                        doctors_added_by_me.push(res.doctors_clinic)
                                    });
                                }    
                                var cond = [{ _id: {$nin : addedDoctor}},{role:user_role},{account_active:"yes"},{email_verify:"yes"}];
                                if(searchData.location) {
                                    cond.push({'profile.address':searchData.location});
                                } 
                                if(searchData.specialization) {
                                    var regex = new RegExp(["", searchData.specialization].join(""), "i");
                                    //cond.push({'profile.specialization':regex});
                                    if(user_role == 'doctor'){
                                        cond.push({'profile.specialization':regex});
                                    }else if(user_role == 'clinic'){
                                        cond.push({'profile.services.value':regex});
                                    }else{
                                    }
                                }
                                if(searchData.city) {
                                    var regex = new RegExp(["", searchData.city].join(""), "i");
                                    cond.push({city:regex});
                                }
                                if(searchData.country) {
                                    var regex = new RegExp(["", searchData.country].join(""), "i");
                                    cond.push({country:regex});
                                } 
                                if(searchData.name){
                                    var regex = new RegExp(["^", searchData.name].join(""), "i");
                                    cond.push({name: regex});    
                                }
                                //console.log("COND:",cond);
                                var resultSet = [];
                                var page = (pageno)?parseInt(pageno):1;
                                var limit = 15;
                                //console.log("Page====>",page);
                                User.find({$and: cond})
                                .paginate(page, limit)
                                .exec(function(err,users){
                                    if(err){
                                        callback({success:false,error:err});
                                    } else {
                                        async.each(users,function(user,cb){
                                            //init
                                            var distance=0;
                                            //Distance calculation using Geolib v2.0.21
                                            if(loggedinUser.latitude && loggedinUser.longitude && user.latitude && user.longitude) {
                                                var dist = geolib.getDistance(
                                                    {latitude: loggedinUser.latitude, longitude: loggedinUser.longitude},
                                                    {latitude: user.latitude, longitude: user.longitude}
                                                );
                                                distance = geolib.convertUnit('km', dist);
                                            }       
                                            //profile picture
                                            var dp = (!user.profile_pic)?null:user.profile_pic;
                                            //check distance
                                            if(searchData.distance){
                                                if(distance <= searchData.distance){
                                                    if (doctors_added_by_me.includes(''+user._id+'')) {
                                                        //do nothing
                                                    }else{
                                                        resultSet.push({
                                                            "userid": user._id,
                                                            "name": user.name,
                                                            "email": user.email,
                                                            "mobile": user.mobile,
                                                            "address": user.profile.address,
                                                            "city": user.city,
                                                            "country": user.country,
                                                            "profile_pic": dp,
                                                            "about":user.about,
                                                            "distance": Math.round( distance ),
                                                            "timing":user.doctors_clinics
                                                        })
                                                    }  
                                                } 
                                            } else {
                                                if (doctors_added_by_me.includes(''+user._id+'')) {
                                                    //do nothing
                                                }else{
                                                    if(user.role == 'doctor'){
                                                        //var timing = user.doctors_clinics;
                                                        var timing = user.profile.timings;
                                                    }else if(user.role == 'clinic'){
                                                        var timing = user.profile.timings;
                                                    }else{
                                                        //do nothing
                                                    }
                                                    console.log('timing', timing);
                                                    resultSet.push({
                                                        "userid": user._id,
                                                        "name": user.name,
                                                        "email": user.email,
                                                        "mobile": user.mobile,
                                                        "address": user.profile.address,
                                                        "city": user.city,
                                                        "country": user.country,
                                                        "profile_pic": dp,
                                                        "about":user.about,
                                                        "distance": Math.round( distance ),
                                                        "timing":timing
                                                    })
                                                } 
                                            }                                                                
                                            cb(null,resultSet);                                                    
                                        },function(err){
                                            if(err){
                                                callback({success: false,status:config.status.SERVER_ERROR, err: err});
                                            }else{
                                                callback({success: true,status:config.status.OK, users: resultSet});
                                            } 
                                        }) //end of async each
                                    }
                                })
                            } else {
                                callback({success:false,message:"This user does not exist"});
                            }
                        }
                    })
                }
            ],function (error, resultSet) {
                if (error) { 
                    callback({success: false, err:error});
                }
                callback({success: true, data: resultSet});
            })                
        }    
    }, 
    /**
    * clinic add doctors
    */
    /*clinic_add_doctors:function(data, userData, callback){
        console.log('userData', userData);
        if(!data.id){
            callback({success: false, message: "UserID is required"});
        } else {           
            //check friend id
            if(userData){
                var createdAt = new Date(Date.now()).toISOString();
                var new_id = mongoose.Types.ObjectId();                
                var updateData = {id:new_id, doctors_clinic:userData, status:'pending', createdAt:createdAt}; 
            }                          
            //update user data
            User.update({_id:data.id}, { $push: {"doctors_clinics":updateData}}, {multi:true}, function (err, res) {
                if (err) {
                    callback({success: false, message: "some error occurred", err: err});
                } else {
                    User.findOne({_id: data.id}).exec(function(err, result){
                        var pushTitle ='Become an associate';                            
                        var pushContent = data.role +' '+data.name+' sent a request to become an associate with you';
                        var notificationObject = new Notification({
                            event_id:new_id,
                            from_id:data.id,
                            to_id:userData,
                            message:pushContent,
                            subject:pushTitle                
                        });
                        notificationObject.save(function(notificationSaveError, notificationSaveData){
                            if(notificationSaveData){                                           
                                request.post({
                                    uri: config.PUSH_NOTIFICATION.URL,
                                    headers: {
                                        "Authorization": "key=" + config.PUSH_NOTIFICATION.API_KEY,
                                        "Content-Type": "application/json"
                                    },
                                    body: {
                                        "notification":{
                                            "title":pushTitle,
                                            "body":pushContent,
                                            "sound":"default",
                                            "click_action":"FCM_PLUGIN_ACTIVITY",
                                            "icon":"fcm_push_icon",
                                            "color":"#91be00"
                                        },
                                        "data":{
                                            "page_name":"notification",
                                            "notification_id":notificationSaveData._id,
                                            "post_id":new_id
                                        },
                                        "to":result.device_token,
                                        "priority":"high",
                                        "restricted_package_name":""
                                    },
                                    json: true
                                }, function (err, response, body) {                                     
                                    callback({success: true, message: "New associate added successfully."});
                                }); //end push notification
                            }
                        });                        
                    });        
                }
            });            
        }
    },*/
    addAssociate:function(data, userData, callback){    
        //console.log('data', data);
        //console.log('userData', userData);    
        if(!data.id){
            callback({success: false, message: "UserID is required"});
        } else {           
            if(userData){
                //check friend id
                if(data.role = 'clinic'){
                    var createdAt = new Date(Date.now()).toISOString();
                    var new_id = mongoose.Types.ObjectId();                
                    var updateData = {id:new_id, doctors_clinic:userData.user_id, status:'pending', createdAt:createdAt}; 
                } 
                if(data.role = 'doctor'){
                    var new_id = mongoose.Types.ObjectId();                
                    var updateData = {id:new_id, doctors_clinic:userData.user_id, hours:userData.hours, status:'pending', createdAt:createdAt}; 
                } 
            }                            
            //update user data
            User.update({_id:data.id}, { $push: {"doctors_clinics":updateData}}, {multi:true}, function (err, res) {
                if (err) {
                    callback({success: false, message: "some error occurred", err: err});
                } else {
                    User.findOne({_id: data.id}).exec(function(err, result){
                        var pushTitle ='Become an associate';                            
                        var pushContent = data.role +' '+data.name+' sent a request to become an associate with you';
                        var notificationObject = new Notification({
                            event_id:new_id,
                            from_id:data.id,
                            to_id:userData.user_id,
                            slug:'associate',
                            message:pushContent,
                            subject:pushTitle                
                        });
                        notificationObject.save(function(notificationSaveError, notificationSaveData){
                            if(notificationSaveData){                                           
                                request.post({
                                    uri: config.PUSH_NOTIFICATION.URL,
                                    headers: {
                                        "Authorization": "key=" + config.PUSH_NOTIFICATION.API_KEY,
                                        "Content-Type": "application/json"
                                    },
                                    body: {
                                        "notification":{
                                            "title":pushTitle,
                                            "body":pushContent,
                                            "sound":"default",
                                            "click_action":"FCM_PLUGIN_ACTIVITY",
                                            "icon":"fcm_push_icon",
                                            "color":"#91be00"
                                        },
                                        "data":{
                                            "page_name":"notification",
                                            "notification_id":notificationSaveData._id,
                                            "post_id":new_id
                                        },
                                        "to":result.device_token,
                                        "priority":"high",
                                        "restricted_package_name":""
                                    },
                                    json: true
                                }, function (err, response, body) {                                     
                                    callback({success: true, message: "New associate added successfully."});
                                }); //end push notification
                            }
                        });                        
                    });        
                }
            });            
        }
    },

    /**
     * List of user added by single clinic or doctor
     */
    request_sent_to_associate: function(userid, callback){        
        //init
        var allUsers = [];
        var allRequestFromArray = [];
        //check user id
        if(!userid){
            callback({success: false, message: "UserID is required"});
        } else {
            User.findOne({_id:userid}).exec(function (err, userdata) {
                if (err) {
                    callback({success: false, err: err});
                } else {
                    //doctors clinics available or not
                    if(userdata.doctors_clinics != '' && userdata.doctors_clinics != undefined && userdata.doctors_clinics != null){
                        var requst_send_or_received = userdata.doctors_clinics;   
                                                               
                        asyncLoop(requst_send_or_received, function (item, next){
                            //find by id
                            User.findById(item.doctors_clinic,function(error,udata){
                                //check if error is not exist

                                if(!error){
                                    //udata
                                    if(udata){

                                        //add user object
                                        var addeduserObj = {
                                            "userid": udata._id,                            
                                            "name": udata.name,
                                            "mobile": udata.mobile, 
                                            "address": udata.profile.address,
                                            "city": udata.city, 
                                            "country": udata.country,                           
                                            "profile_pic": udata.profile_pic,
                                            "specialization": udata.profile.specialization,
                                            "services": udata.profile.services,
                                            "timings": udata.profile.timings,
                                            "about": udata.profile.about,
                                            "yearexp": udata.profile.yearexp,
                                            "status": item.status,
                                            "createdAt": item.createdAt
                                        };
                                        allUsers.push(addeduserObj);
                                    }
                                }
                                next();
                            });
                        }, function (){
                            //check length
                            if(allUsers.length > 0){
                                //callback                                
                                callback({success: true, message: "List of user details.", data:allUsers});
                            }else{  
                                //callback                                  
                                callback({success: true, message: "No data found!.", data:[]});
                            }
                        });   
                    }else{
                        callback({success: true, message: "No data found!.", data:[]}); 
                    }    
                }
            });
        }
    },

    /**
     * Request sent and received to be a associate
     */
    request_sent_and_received_to_associate: function(userid, reqType, callback){

        var reqType = reqType.type;
        console.log('reqType', reqType);

        //init
        var allUsers = [];
        var requst_send_or_received = [];
        //check user id
        if(!userid){
            callback({success: false, message: "UserID is required"});
        } else if(reqType == 'received') {

            User.find({},function (err, allData) {            
                if (err) {                
                    callback({success: false, message:"Unable to get user", data:""});
                }else{
                    if(allData != '' && allData != undefined && allData != null){

                        for (var i =0; i < allData.length; i++) {

                            var all_users_data = allData[i];
                           
                            if(all_users_data.doctors_clinics != '' && all_users_data.doctors_clinics != undefined && all_users_data.doctors_clinics != null){

                                for (var j =0; j < all_users_data.doctors_clinics.length; j++) {
                                    
                                    if(all_users_data.doctors_clinics[j].doctors_clinic == userid){
                                        console.log("matched=>");
                                        //var is_exist = "yes";  
                                        var request_received = all_users_data.doctors_clinics[j];

                                        var request_by = all_users_data;
                                        var allObj = {
                                            "doctors_clinic": request_by._id,
                                            "status": request_received.status,
                                            "createdAt": request_received.createdAt
                                        };
                                        //requst_send_or_received.push(request_received);

                                        requst_send_or_received.push(allObj);     
                                    }
                                }
                            }   
                        }
                                                                  
                        asyncLoop(requst_send_or_received, function (item, next){
                            //find by id
                            User.findById(item.doctors_clinic,function(error,udata){
                                //check if error is not exist
                                if(!error){
                                    //udata
                                    if(udata){

                                        //add user object
                                        var addeduserObj = {
                                            "userid": udata._id,                            
                                            "name": udata.name,
                                            "mobile": udata.mobile, 
                                            "address": udata.profile.address,
                                            "city": udata.city, 
                                            "country": udata.country,                           
                                            "profile_pic": udata.profile_pic,
                                            "specialization": udata.profile.specialization,
                                            "services": udata.profile.services,
                                            "timings": udata.profile.timings,
                                            "about": udata.profile.about,
                                            "yearexp": udata.profile.yearexp,
                                            "status": item.status,
                                            "createdAt": item.createdAt
                                        };
                                        allUsers.push(addeduserObj);
                                    }
                                }
                                next();
                            });
                        }, function (){
                            //check length
                            if(allUsers.length > 0){
                                //callback                                
                                callback({success: true, message: "List of user details.", data:allUsers});
                            }else{  
                                //callback                                  
                                callback({success: true, message: "No data found!.", data:[]});
                            }
                        });                  
                    }
                }
            });            
        } else{

            User.findOne({_id:userid}).exec(function (err, userdata) {
                if (err) {
                    callback({success: false, err: err});
                } else {
                    //doctors clinics available or not
                    if(userdata.doctors_clinics != '' && userdata.doctors_clinics != undefined && userdata.doctors_clinics != null){
                        var requst_send_or_received = userdata.doctors_clinics;   
                                                               
                        asyncLoop(requst_send_or_received, function (item, next){
                            //find by id
                            User.findById(item.doctors_clinic,function(error,udata){
                                //check if error is not exist

                                if(!error){
                                    //udata
                                    if(udata){

                                        //add user object
                                        var addeduserObj = {
                                            "userid": udata._id,                            
                                            "name": udata.name,
                                            "mobile": udata.mobile, 
                                            "address": udata.profile.address,
                                            "city": udata.city, 
                                            "country": udata.country,                           
                                            "profile_pic": udata.profile_pic,
                                            "specialization": udata.profile.specialization,
                                            "services": udata.profile.services,
                                            "timings": udata.profile.timings,
                                            "about": udata.profile.about,
                                            "yearexp": udata.profile.yearexp,
                                            "status": item.status,
                                            "createdAt": item.createdAt
                                        };
                                        allUsers.push(addeduserObj);
                                    }
                                }
                                next();
                            });
                        }, function (){
                            //check length
                            if(allUsers.length > 0){
                                //callback                                
                                callback({success: true, message: "List of user details.", data:allUsers});
                            }else{  
                                //callback                                  
                                callback({success: true, message: "No data found!.", data:[]});
                            }
                        });   
                    }else{
                        callback({success: true, message: "No data found!.", data:[]}); 
                    }    
                }
            }); 
        }
    },    

    /*list_of_user_added_by_single_clinic_or_doctor: function(userid, callback){        
        //init
        var allUsers = [];
        var allRequestFromArray = [];
        //check user id
        if(!userid){
            callback({success: false, message: "UserID is required"});
        } else {
            User.findOne({_id:userid})
            .exec(function (err, userdata) {
                if (err) {
                    callback({success: false, err: err});
                } else {
                    //doctors clinics available or not
                    if(userdata.doctors_clinics != '' && userdata.doctors_clinics != undefined && userdata.doctors_clinics != null){
                        var requst_send_or_received = userdata.doctors_clinics;   
                        User.find({},function (err, allData) {            
                            if (err) {                
                                callback({success: false, message:"Unable to get user", data:""});
                            }else{
                                if(allData != '' && allData != undefined && allData != null){
                                    for (var i =0; i < allData.length; i++) {
                                        var all_users_data = allData[i];
                                        //console.log('all_users_data', all_users_data)
                                        //console.log('status : ' + checkValue(allData[i]._id, requst_send_or_received) );
                                        var status = checkValue(allData[i]._id, requst_send_or_received);
                                        if(status != 'Exist'){
                                            if(all_users_data.doctors_clinics != '' && all_users_data.doctors_clinics != undefined && all_users_data.doctors_clinics != null){
                                                for (var j =0; j < all_users_data.doctors_clinics.length; j++) {
                                                    console.log('doctors_clinics', all_users_data.doctors_clinics[j].doctors_clinic);
                                                    console.log('userId', userid);
                                                    if(all_users_data.doctors_clinics[j].doctors_clinic == userid){
                                                        console.log("matched=>");
                                                        //var is_exist = "yes";  
                                                        var request_received = all_users_data.doctors_clinics[j];

                                                        var request_by = all_users_data;
                                                        var allObj = {
                                                            "doctors_clinic": request_by._id,
                                                            "status": request_received.status,
                                                            "createdAt": request_received.createdAt
                                                        };
                                                        //requst_send_or_received.push(request_received);

                                                        requst_send_or_received.push(allObj);     
                                                    }
                                                }
                                            }
                                        }    
                                    }
                                    //console.log('requst_send_or_received', requst_send_or_received);                                            
                                    asyncLoop(requst_send_or_received, function (item, next){
                                        //find by id
                                        User.findById(item.doctors_clinic,function(error,udata){
                                            //check if error is not exist

                                            if(!error){
                                                //udata
                                                if(udata){

                                                    //add user object
                                                    var addeduserObj = {
                                                        "userid": udata._id,                            
                                                        "name": udata.name,
                                                        "mobile": udata.mobile, 
                                                        "address": udata.profile.address,
                                                        "city": udata.city, 
                                                        "country": udata.country,                           
                                                        "profile_pic": udata.profile_pic,
                                                        "specialization": udata.profile.specialization,
                                                        "services": udata.profile.services,
                                                        "timings": udata.profile.timings,
                                                        "about": udata.profile.about,
                                                        "yearexp": udata.profile.yearexp,
                                                        "status": item.status,
                                                        "createdAt": item.createdAt
                                                    };
                                                    allUsers.push(addeduserObj);
                                                }
                                            }
                                            next();
                                        });
                                    }, function (){
                                        //check length
                                        if(allUsers.length > 0){
                                            //callback                                
                                            callback({success: true, message: "List of user details.", data:allUsers});
                                        }else{  
                                            //callback                                  
                                            callback({success: true, message: "No data found!.", data:[]});
                                        }
                                    });                  
                                }
                            }
                        })
                        //});
                    }else{
                        callback({success: true, message: "No data found!.", data:[]}); 
                    }    
                }
            })
        }
    },*/  
    /**
    * Edit associate timing
    *
    * userid (doctor or clinic)
    * associateId (clinic or doctor)
    */
    update_associate_timing: function (userid, associateData, callback) {
        //associate id
        var associateId = associateData.associateId;
        //check user id
        if(!userid){
            callback({success: false, message: "userId is required"});
        }else {
            //update                
            User.update({_id: userid, "doctors_clinics.doctors_clinic": associateId} , {"$set" : {"doctors_clinics.$.hours" : associateData.hours} }, function (err, tank) {             
                if (err) {
                    //callback
                    callback({success: false, message: "Some error occurred", err: err});
                }else{
                    //callback
                    callback({success: true, message: "Associate data updated successlully", userid: userid});
                }
            });
        }
    },
     
    /**
     * Delete associate
     */ 
    /*delete_associate:function(userid, associateData, callback) { 

        var alltestData = [];
        var associateId = associateData.associateId;
       
        User.find({},function (err, allData) {            
            if (err) {                
                callback("Unable to process your request!");
            }else{
                //console.log('associatedata 2 ', allData);

                if(allData){

                    asyncLoop(allData, function (res, next){

                        console.log('response ', res);

                        if(res.doctors_clinics != null && res.doctors_clinics != undefined && res.doctors_clinics !=''){

                                var allObj = {
                                    "userid": res._id,                            
                                    "doctors_clinics": res.doctors_clinics
                                };

                            alltestData.push(allObj);                            
                        }
                        next();
                    }, function (){

                        console.log('alltestData', alltestData);
                        

                        if(alltestData.doctors_clinics != '' && alltestData.doctors_clinics != undefined && alltestData.doctors_clinics != null){

                            asyncLoop(alltestData.doctors_clinics, function (item, next){     

                                console.log('item', item);
                                
                                if(item.id == associateId){

                                    User.update({_id:all_users_data._id}, { $pull: { 'doctors_clinics' : { 'id': associateId } }}, { safe: true, multi:true }, function (err, res) {
                                        //console.log(res);
                                        //console.log(res);
                                        if (err) {
                                            console.log("err1", err); 
                                            message =  "Some error occurred";
                                            errData = err;
                                            statusData = false;
                                            next();
                                            
                                        } else if(res) {
                                            console.log("response1", res);

                                            message =  "Associate deleted successfully.";
                                            resData = res;
                                            statusData = true;
                                            next();
                                        }else{
                                            console.log("err222", err);   
                                            message =  "Unable to delete the doctor";
                                            errData = err;
                                            statusData = false;
                                            next(); 
                                        }
                                    });                                            
                                }
                            }, function (){
                                callback({success: statusData, message: message, data: resData, "err":errData});
                            });
                        }else{
                            callback({success: false, message: "No data found!.", data:[]});
                        }
                    });    
                }else{
                    callback({success: false, message: "No data found!.", data:[]});
                }
            }
        });
    },*/

    delete_associate:function(userid, associateData, callback){ 
        var associateId = associateData.associateId;
        console.log('associateId', associateId);       
        if(!userid){
            callback({success: false, message: "UserID is required"});
        }else{            
            User.findOne({_id: userid},function (err,associatedata) {
                if (err){                    
                    callback({success: false, message: "Unable to process your request!", err: err});
                }else{
                    //console.log('associate id', associatedata._id);                    
                    if(associatedata.doctors_clinics != '' && associatedata.doctors_clinics != null && associatedata.doctors_clinics != undefined){
                        //update
                        User.update({_id:associatedata._id}, { $pull: { 'doctors_clinics' : { 'doctors_clinic': associateId } }}, { safe: true, multi:true }, function (err, res) {
                            //console.log(res);
                            if (err) {
                                callback({success: false, message: "Unable to process your request!", err: err});
                            } else if(res) {
                                callback({success: true, message: "Associate deleted successfully", associate_id:associateId});
                            }else{
                                callback({success: false, message: "Unable to delete the doctor", "data":""});
                            }
                        });
                    }else{
                        callback({success: true, message: "No data found!.", data:[]});
                    }       
                }
            });                     
        }
    },

    /**
    * Search  as per selected specialization ( default is nearby)
    */
    patientSearch: function(userid, searchData, pageno, callback){
        //init
        var distance = 0;
        var resultSet = [];  
        var allData = [];      
        var page = (pageno)?parseInt(pageno):1;
        var limit = 15;
        var avg_rating = 0;
        var poularity = 0;
        async.waterfall([
            search         
        ], function (error, message, response) {
            if(error){
                //callback                                
                callback({success: false, message:error});
            }else{  
                //callback                                  
                callback({success: true, message:message, data:response});
            }
        });        
        function search(callback){  
            console.log('searchData', searchData);
            User.findById(userid,function(err,loggedinUser){
                if(err){
                    callback(err);
                } else {
                    if(loggedinUser){                        
                        var cond = [{ _id: {$nin : userid}},{role:{ $ne:'patient'}},{account_active:"yes"},{email_verify:"yes"}];
                        //search with specialization
                        if(searchData.specialization) {
                            cond.push({$or:[{'profile.specialization':new RegExp(searchData.specialization, "i")},{'profile.services.value':new RegExp(searchData.specialization, "i")}]});
                        }
                        //search with gender
                        if(searchData.gender) {                            
                            cond.push({'gender':searchData.gender});
                        }
                        console.log('searchData.price',searchData.price)
                        if(searchData.price!="" && searchData.price!=undefined) {       
                            if(searchData.price==null ){
                                console.log(typeof(searchData.price))
                                cond.push({'profile.consultation_fee': {'$lte':'0'}});
                            }else if(searchData.price==200){
                                cond.push({'profile.consultation_fee': {'$lte':'200'}});
                            }
                            else if(searchData.price==500){
                                cond.push({'profile.consultation_fee': {'$lte':'500'}});
                            }
                            else{
                                cond.push({'profile.consultation_fee': {'$gte':'500'}});
                            }
                        }
                        if(searchData.serviceprov) {                            
                            cond.push({'role':searchData.serviceprov});
                        } 
                        //
                        // ──────────────────────────────────────────────────────────── I ──────────
                        //   :::::: S E R A C H   D A Y : :  :   :    :     :        :          :
                        // ──────────────────────────────────────────────────────────────────────
                        //
                        if(searchData.day!=undefined) {
                            console.log(searchData.day,'searchData.day')
                            cond.push(
                                {'profile.timings': 
                                {$elemMatch: {'dateName': searchData.day,'timefrm':{$ne:''}}}
                            });
                        }                        
                        /*if(searchData.timefrm!=undefined) {                            
                            cond.push(
                                {'profile.timings': 
                                {$elemMatch: {'dateName': searchData.day,'timefrm':searchData.timefrm,'timeto':searchData.timeto}} });
                        }*/                            
                            
                        console.log(cond);
                        User.find({$and: cond})
                            .paginate(page, limit)
                            .exec(function(err,users){
                                if(err){
                                    callback(err);
                                } else {

                                    async.each(users,function(user,cb){
                                        console.log('user', user);
                                        Rating.find({to_id: user._id}).exec(function(err,ratings){

                                            //console.log(ratings,'ratings')

                                            Booking.find({doctor_clinic_id: user._id}).exec(function(err,bookings){

                                                if (bookings.length > 0) {
                                                    var poularity = bookings.length;
                                                }

                                                if(ratings.length > 0){                                  
                                                    for (var i = 0; i < ratings.length; i++) {
                                                        allData.push(ratings[i].avg_rating);
                                                    }
                                                    var sum = allData.reduce(getSum);
                                                    var count = allData.length;
                                                    avg_rating = (sum / count); 
                                                }                                                      
                                                var lat_long = {latitude: loggedinUser.latitude, longitude:loggedinUser.longitude };
                                                if(searchData.search_latitude != null && searchData.search_latitude != '' && searchData.search_latitude != undefined){
                                                    lat_long.latitude = searchData.search_latitude;
                                                }
                                                if(searchData.search_longitude != null && searchData.search_longitude != '' && searchData.search_longitude != undefined){
                                                    lat_long.longitude = searchData.search_longitude;
                                                }                                    
                                                //Distance calculation using Geolib v2.0.21
                                                if(lat_long.latitude && lat_long.longitude && user.latitude && user.longitude) {
                                                    var dist = geolib.getDistance(
                                                        {latitude: lat_long.latitude, longitude: lat_long.longitude},
                                                        {latitude: user.latitude, longitude: user.longitude}
                                                    );
                                                    console.log('dist', dist);
                                                    //distance
                                                    distance = geolib.convertUnit('km', dist, 2);
                                                } 
                                                console.log('distance', distance);  
                                                if(distance <= 5000){
                                                    var dp = (!user.profile_pic)?null:user.profile_pic;
                                                    resultSet.push({
                                                        "userid": user._id,
                                                        "name": user.name,
                                                        "email": user.email,
                                                        "role": user.role,
                                                        "profile_pic": dp,
                                                        "address": user.profile.address,
                                                        "city": user.city,
                                                        "country": user.country,
                                                        "distance":Math.round(distance),
                                                        "timings": user.profile.timings,
                                                        "consultation_fee": user.profile.consultation_fee,
                                                        "rating": avg_rating,
                                                        "poularity" : poularity
                                                    })
                                                } 
                                                cb(null,resultSet);
                                            });                                                 
                                        });                                    
                                    },function(){
                                        callback(null, 'Sucess', resultSet);         
                                    }); //end of async each
                                }
                            });                       
                        } else {
                            callback("This user does not exist");
                        }
                    }
                }); 
            }
        },
        /**
        * Patient book clinic or doctor
        */
        patient_book_doctor_clinic:function(userData, userid,callback){
            //check user id
            if(!userid){
                callback({success: false, message: "UserID is required"});
            } else {         
                var now = new Date(userData.booking_date);
                var today = new Date(Date.UTC(now.getUTCFullYear(), now.getUTCMonth(), now.getUTCDate()));
                Booking.count({})
                .where({doctor_clinic_id:userData.doctor_clinic_id})
                .where({patient_id:userid})
                .where({booking_timings:userData.booking_timings})
                .where({booking_date:{'$gte':today}})
                .where({status:{'$ne':'cancel'}})
                .exec(function(err,book){  
                    console.log('book',book);  
                    if(book > 0){
                        callback({success: false, message: "You have already booked."});                                    
                    } else {
                        //insert
                        if(userData.reference!='' || userData.reference !=null || userData.reference !=undefined){
                            userData['reference'] = userData.reference; 
                        }else{
                            userData['reference'] = '';
                        }
                        var bookData = {
                            "patient_id" : userid,
                            "doctor_clinic_id" : userData.doctor_clinic_id,
                            "reference" : userData.reference,
                            "name": userData.name,
                            "email":userData.email,
                            "mobile":userData.mobile,
                            "booking_timings":userData.booking_timings,
                            "booking_date":userData.booking_date,
                            "status":'pending', 
                            "added_by_status":'patient'
                        };
                        var booking = new Booking(bookData);
                        booking.save(function (err, res) {
                            if (err) {
                                callback({success: false, err: err});
                            } else {
                                /////////////////////
                                var pushTitle ='Booking.';
                                var pushContent = userData.name+ ' sent a new booking request.';
                                //dummy event id
                                var event_id = mongoose.Types.ObjectId();
                                var notificationObject = new Notification({
                                    event_id:event_id,
                                    from_id:userid,
                                    to_id:userData.doctor_clinic_id,
                                    slug:'booking',
                                    message:pushContent,
                                    subject:pushTitle                
                                });            
                                User.findOne({_id:userData.doctor_clinic_id}).exec(function(err, userData){  
                                    if(err){
                                        callback(err);
                                    }  
                                    if(userData){
                                        notificationObject.save(function(notificationSaveError, notificationSaveData){
                                            if(notificationSaveData){                                           
                                                request.post({
                                                    uri: config.PUSH_NOTIFICATION.URL,
                                                    headers: {
                                                        "Authorization": "key=" + config.PUSH_NOTIFICATION.API_KEY,
                                                        "Content-Type": "application/json"
                                                    },
                                                    body: {
                                                        "notification":{
                                                            "title":pushTitle,
                                                            "body":pushContent,
                                                            "sound":"default",
                                                            "click_action":"FCM_PLUGIN_ACTIVITY",
                                                            "icon":"fcm_push_icon",
                                                            "color":"#91be00"
                                                        },
                                                        "data":{
                                                            "page_name":"notification",
                                                            "notification_id":notificationSaveData._id,
                                                            "post_id":event_id
                                                        },
                                                        "to":userData.device_token,
                                                        "priority":"high",
                                                        "restricted_package_name":""
                                                    },
                                                    json: true
                                                }, function (err, response, body) {
                                                    //next();   
                                                    callback({success: true, message: "Booking inserted!",data: res});                                                  
                                                }); //end push notification
                                            }
                                        });
                                    }    
                                });
                                /////////////////
                                //callback({success: true, message: "Booking inserted!",data: res});
                            }
                        })
                    }
                });               
            }
        },
        /**
        * Appointment details from doctor/clinic or patient login
        */
        appointment_details: function(appointmentid, userData, callback){
            var user_role = userData.role;
            booking.findById(appointmentid,function(err,bookingDetails){
                if(err){
                    callback({success:false,error:err});
                } else {
                    if(bookingDetails){
                        console.log(bookingDetails);
                        if(user_role == 'patient'){
                            var userId = bookingDetails.doctor_clinic_id;
                        }else{
                            var userId = bookingDetails.patient_id;
                        }
                        User.findById(userId,function(err,userDetails){
                            if(userDetails){
                                var appionmentObj = {
                                    "userid": userDetails._id,                            
                                    "name": userDetails.name,
                                    "address": userDetails.profile.address, 
                                    "fees": userDetails.profile.consultation_fee,
                                    "profile_pic": userDetails.profile_pic,
                                    "specialization": userDetails.profile.specialization,
                                    "services": udata.profile.services,
                                    "timings": udata.profile.timings,
                                    "about": userDetails.profile.about,
                                    "yearexp": userDetails.profile.yearexp,
                                    "from_name": bookingDetails.name,
                                    "from_mobile_no": bookingDetails.mobile,
                                    "from_patient_booking_timings": bookingDetails.booking_timings,
                                    "from_patient_booking_date": bookingDetails.booking_date,
                                    "booking_status": bookingDetails.status
                                }
                                callback({success: true, message: "Appionment details.",data: appionmentObj});
                            }else{
                                callback({success:false,error:err});
                            }
                        });    
                    }else{
                        callback({success:false,message:"This booking does not exist"});                    
                    }
                }
            })        
        },
        /**
        * Doctor new booking request by patient
        */
        doctor_new_booking_request_by_patient: function(userid, callback){        
            //init
            var allPatients = [];
            //check user id
            if(!userid){
                callback({success: false, message: "UserID is required"});
            } else {
                Booking.find({doctor_clinic_id:userid, $or:[{$and:[{status:'pending'},{added_by_status:'patient'}]},{$and:[{status:'rescheduled'},{added_by_status:'patient'}]}]})
                .exec(function (err, userdata) {
                    if (err) {
                        callback({success: false, err: err});
                    } else { 
                        //console.log('hi');
                        console.log("userdata",userdata);  
                        if(userdata != '' && userdata != undefined && userdata != null){                      
                            //loop
                            asyncLoop(userdata, function (item, next){
                                //console.log('item', item);
                                //find by id
                                User.findById(item.patient_id,function(error,udata){                                
                                    //check if error is not exist
                                    if(!error){
                                        //udata
                                        if(udata){
                                            //add user object
                                            var addeduserObj = {
                                                "userid": udata._id,                            
                                                "name": udata.name,
                                                "mobile": udata.mobile, 
                                                "address": udata.profile.address,
                                                "city": udata.city, 
                                                "country": udata.country,                           
                                                "profile_pic": udata.profile_pic
                                            };
                                            var bookingObj = {
                                                "booking_id": item._id,
                                                "booking_timing": item.booking_timings,
                                                "booking_date": item.booking_date,
                                                "status": item.status,
                                                "added_by_status": item.added_by_status
                                            };
                                            //var patient_status = item.status;
                                            var inner_output = {patient_details:addeduserObj,booking_details: bookingObj}
                                            allPatients.push(inner_output);
                                        }
                                    }
                                    next();
                                });
                            }, function (){
                                //check length
                                if(allPatients.length > 0){
                                    //callback                                
                                    callback({success: true, message: "List of user details.", data:allPatients});
                                }else{  
                                    //callback                                  
                                    callback({success: true, message: "No patient found!.", data:allPatients});
                                }
                            });
                        }else{
                            callback({success: true, message: "No data found!.", data:[]}); 
                        }                                           
                    }
                })
            }
        },
        /**
        * Doctor clinic upcoming appionment history
        */
        doctor_clinic_upcoming_appionment_history: function(userid, booking, callback){  
            //var booking_date = new Date(booking.booking_date);
            var booking_date = booking.booking_date;
            var booking_month = booking.booking_month; 
            var booking_year = booking.booking_year; 
            //console.log('booking_year', booking_year);          
            //init
            var allPatients = [];
            //check user id
            if(!userid){
                callback({success: false, message: "UserID is required"});
            } else {
                if(booking_date != '' && booking_date != null && booking_date != undefined){
                    var cond = {$and:[{doctor_clinic_id:userid}, {$or:[{$and:[{status:'accept'}, {added_by_status:'doctor'}]},{$and:[{status:'rescheduled'}, {added_by_status:'doctor'}]}, {$and:[{status:'accept'}, {added_by_status:'clinic'}]}, {$and:[{status:'rescheduled'}, {added_by_status:'clinic'}]}, {$and:[{status:'accept'}, {added_by_status:'patient'}]}]},{'$where': 'this.booking_date.toJSON().slice(0, 10)=='+'"'+ booking_date+'"'}]}
                }else if(booking_month !='' && booking_month != null && booking_month != undefined){
                    var cond = {$and:[{doctor_clinic_id:userid}, {$or:[{$and:[{status:'accept'}, {added_by_status:'doctor'}]},{$and:[{status:'rescheduled'}, {added_by_status:'doctor'}]}, {$and:[{status:'accept'}, {added_by_status:'clinic'}]}, {$and:[{status:'rescheduled'}, {added_by_status:'clinic'}]},{$and:[{status:'accept'}, {added_by_status:'patient'}]}]},
                    {'$where': 'this.booking_date.getMonth()+1 ==='+booking_month}, 
                    {'$where': 'this.booking_date.getFullYear() ==='+booking_year},
                    {booking_date: {'$gte': (new Date())}}]}    
                }else{
                    //do nothing
                }    
                console.log('cond', cond);
                var sort_field = 'booking_date';
                var order = '1';   //decending 
                Booking.find(cond).sort([[sort_field, order]])
                .exec(function (err, userdata) {
                    if (err) {
                        callback({success: false, err: err});
                    } else {                         
                        if(userdata != '' && userdata != undefined && userdata != null){                      
                            //loop
                            asyncLoop(userdata, function (item, next){                                
                                //find by id
                                User.findById(item.patient_id,function(error,udata){
                                    //check if error is not exist
                                    if(!error){
                                        //udata
                                        if(udata){
                                            //add user object
                                            var addeduserObj = {
                                                "userid": udata._id,                            
                                                "name": udata.name,
                                                "mobile": udata.mobile, 
                                                "address": udata.profile.address,
                                                "city": udata.city, 
                                                "country": udata.country,                           
                                                "profile_pic": udata.profile_pic
                                            };
                                            var bookingObj = {
                                                "booking_id": item._id,
                                                "booking_timing": item.booking_timings,
                                                "booking_date": item.booking_date,
                                                "status": item.status,
                                                "added_by_status": item.added_by_status
                                            };                                            
                                            var inner_output = {patient_details:addeduserObj,booking_details: bookingObj}
                                            allPatients.push(inner_output);
                                        }
                                    }
                                    next();
                                });
                            }, function (){
                                //check length
                                if(allPatients.length > 0){
                                    //callback                                
                                    callback({success: true, message: "List of user details.", data:allPatients});
                                }else{  
                                    //callback                                  
                                    callback({success: true, message: "No patient found!.", data:allPatients});
                                }
                            });
                        }else{
                            callback({success: true, message: "No data found!.", data:[]}); 
                        }                                           
                    }
                })
            }
        },
        /**
        * Patient appionment history with doctors
        */
        patient_appionment_history_with_doctors: function(patientid, callback){
            console.log('patientid', patientid);        
            //init
            var allDoctors = [];
            //check user id
            if(!patientid){
                callback({success: false, message: "Patient Id is required"});
            } else {
                var sort_field = 'booking_date';
                var order = '-1';
                Booking.find({patient_id:patientid}).sort([[sort_field, order]])
                .exec(function (err, userdata) {
                    if (err) {
                        callback({success: false, err: err});
                    } else { 
                        console.log('userdata', userdata);
                        if(userdata != '' && userdata != undefined && userdata != null){
                            //loop
                            asyncLoop(userdata, function (item, next){
                                if(item.reference == '' || item.reference == null || item.reference == undefined){
                                    //find by id
                                    User.findById(item.doctor_clinic_id,function(error,udata){
                                        console.log('udata', udata);
                                        //check if error is not exist
                                        if(!error){
                                            //udata
                                            if(udata){
                                                //add user object
                                                var addeduserObj = {
                                                    "userid": udata._id,                            
                                                    "name": udata.name,
                                                    "mobile": udata.mobile, 
                                                    "address": udata.profile.address,
                                                    "city": udata.city, 
                                                    "country": udata.country,                           
                                                    "profile_pic": udata.profile_pic,
                                                    "consultation_fee": udata.profile.consultation_fee
                                                };
                                                var bookingObj = {
                                                    "booking_id": item._id,
                                                    "booking_date": item.booking_date,
                                                    "booking_timings": item.booking_timings,
                                                    "booking_cancel_date": item.booking_cancel_date,
                                                    "status": item.status,
                                                    "added_by_status": item.added_by_status
                                                };
                                                var allData={reference_user:{},doctor_details:addeduserObj,booking_details: bookingObj};
                                                allDoctors.push(allData);
                                            }
                                        }
                                        next();
                                    });
                                }else{
                                    var user_with_ref=[];
                                    //find referer details
                                    User.findById(item.reference,function(error,udata){
                                        console.log('refdata', udata);
                                        //check if error is not exist
                                        if(!error){
                                            //udata
                                            if(udata){
                                                //add user object
                                                var ref_output = {
                                                    "userid": udata._id,                            
                                                    "name": udata.name,
                                                    "mobile": udata.mobile, 
                                                    "address": udata.profile.address,
                                                    "city": udata.city, 
                                                    "country": udata.country,                           
                                                    "profile_pic": udata.profile_pic,
                                                    "consultation_fee": udata.profile.consultation_fee
                                                };
                                                User.findById(item.doctor_clinic_id,function(error,udata_doctor){
                                                    if(!error){
                                                        if(udata_doctor){
                                                            var doctor_details = {
                                                                "userid": udata_doctor._id,
                                                                "name": udata_doctor.name,
                                                                "mobile": udata_doctor.mobile, 
                                                                "address": udata_doctor.profile.address,
                                                                "city": udata_doctor.city, 
                                                                "country": udata_doctor.country,                           
                                                                "profile_pic": udata_doctor.profile_pic,
                                                                "consultation_fee": udata_doctor.profile.consultation_fee
                                                            };
                                                            var bookingObj = {
                                                                "booking_id": item._id,
                                                                "booking_timings": item.booking_timings,
                                                                "booking_cancel_date": item.booking_cancel_date,
                                                                "status": item.status,
                                                                "added_by_status": item.added_by_status
                                                            };
                                                            var allData={reference_user:ref_output,doctor_details:doctor_details,booking_details: bookingObj};
                                                            allDoctors.push(allData);
                                                        }
                                                    }
                                                    //console.log('hi');
                                                    next();
                                                });                                        
                                            }
                                        }else{
                                            next();  
                                        }
                                    });
                                }
                            }, function (){
                                //check length
                                if(allDoctors.length > 0){
                                    //callback                                
                                    callback({success: true, message: "List of doctors details.", data:allDoctors});
                                }else{  
                                    //callback                                  
                                    callback({success: true, message: "No doctor found!.", data:allDoctors});
                                }
                            });
                        }else{
                            callback({success: true, message: "No data found!.", data:[]}); 
                        }                                               
                    }
                })
            }
        },
        /**
        * Doctor appionment history with patients
        */
        doctor_appionment_history_with_patients: function(doctorid, callback){
            //init
            var allPatients = [];
            //check doctor id
            if(!doctorid){
                callback({success: false, message: "Doctor Id is required"});
            }else{
                var sort_field = 'booking_date';
                var order = '-1';
                Booking.find({doctor_clinic_id:doctorid}).sort([[sort_field, order]])
                .exec(function (err, historyData) {
                    if (err) {
                        callback({success: false, err: err});
                    } else { 
                        if(historyData != '' && historyData != undefined && historyData != null){
                            //loop
                            asyncLoop(historyData, function (item, next){
                                //find by id
                                User.findById(item.patient_id,function(error,udata){                                   
                                    //check if error is not exist
                                    if(!error){
                                        //udata
                                        if(udata){
                                            //add user object
                                            var addeduserObj = {
                                                "userid": udata._id,                            
                                                "name": udata.name,
                                                "mobile": udata.mobile, 
                                                "address": udata.profile.address,
                                                "city": udata.city, 
                                                "country": udata.country,                           
                                                "profile_pic": udata.profile_pic,
                                                "consultation_fee": udata.profile.consultation_fee
                                            };
                                            var bookingObj = {
                                                "booking_id": item._id,
                                                "booking_date": item.booking_date,
                                                "booking_timings": item.booking_timings,
                                                "booking_cancel_date": item.booking_cancel_date,
                                                "status": item.status,
                                                "added_by_status": item.added_by_status
                                            };
                                            var allData={patient_details:addeduserObj,booking_details: bookingObj};
                                            allPatients.push(allData);
                                        }
                                    }
                                    next();
                                });                                
                            }, function (){
                                //check length
                                if(allPatients.length > 0){
                                    //callback                                
                                    callback({success: true, message: "List of patient details.", data:allPatients});
                                }else{  
                                    //callback                                  
                                    callback({success: true, message: "No patient found!.", data:allPatients});
                                }
                            });
                        }else{
                            callback({success: true, message: "No data found!.", data:[]}); 
                        }
                    }
                });                
            }
        },    
        /**
        * Patient upcoming appionment history
        */
        patient_upcoming_appionment_history: function(userid, callback){        
            //init
            var allPatients = [];
            var date = new Date();
            console.log('date', date);
            var current_time = date.toLocaleTimeString();
            console.log('current_time', current_time);
            //check user id
            if(!userid){
                callback({success: false, message: "UserID is required"});
            } else {
                //Booking.find({patient_id:userid, status: { $ne: 'cancel' }})
                //.exec(function (err, userdata) {
                Booking.find({patient_id:userid, $or:[{status:'accept'},{status:'pending'},{status:'rescheduled'}], booking_date:{ $gte: date }})
                .exec(function (err, userdata) {        
                    if (err) {
                        callback({success: false, err: err});
                    } else { 
                        if(userdata != '' && userdata != undefined && userdata != null){    
                            //loop
                            asyncLoop(userdata, function (item, next){
                                //console.log('item', item);
                                if(item.reference == '' || item.reference == null || item.reference == undefined){
                                    //find by id
                                    User.findById(item.doctor_clinic_id,function(error,udata){
                                        //console.log('udata', udata);
                                        //check if error is not exist
                                        if(!error){
                                            //udata
                                            if(udata){
                                                //add user object
                                                var addeduserObj = {
                                                    "userid": udata._id,                            
                                                    "name": udata.name,
                                                    "mobile": udata.mobile, 
                                                    "address": udata.profile.address,
                                                    "city": udata.city, 
                                                    "country": udata.country,                           
                                                    "profile_pic": udata.profile_pic,
                                                    "consultation_fee": udata.profile.consultation_fee
                                                };
                                                var bookingObj = {
                                                    "booking_id": item._id,
                                                    "booking_timings": item.booking_timings,
                                                    "booking_date": item.booking_date,
                                                    "status": item.status,
                                                    "added_by_status": item.added_by_status
                                                };
                                                var allData={reference_user:{},doctor_details:addeduserObj,booking_details: bookingObj};
                                                allPatients.push(allData);
                                            }
                                        }
                                        next();
                                    });
                                }else{
                                    var user_with_ref=[];
                                    //find referer details
                                    User.findById(item.reference,function(error,udata){
                                        //console.log('udata', udata);
                                        //check if error is not exist
                                        if(!error){
                                            //udata
                                            if(udata){
                                                //add user object
                                                var ref_output = {
                                                    "userid": udata._id,                            
                                                    "name": udata.name,
                                                    "mobile": udata.mobile, 
                                                    "address": udata.profile.address,
                                                    "city": udata.city, 
                                                    "country": udata.country,                           
                                                    "profile_pic": udata.profile_pic,
                                                    "consultation_fee": udata.profile.consultation_fee
                                                };
                                                User.findById(item.doctor_clinic_id,function(error,udata_doctor){
                                                    if(!error){
                                                        if(udata_doctor){
                                                            var doctor_details = {
                                                                "userid": udata_doctor._id,                            
                                                                "name": udata_doctor.name,
                                                                "mobile": udata_doctor.mobile, 
                                                                "address": udata_doctor.profile.address,
                                                                "city": udata_doctor.city, 
                                                                "country": udata_doctor.country,                           
                                                                "profile_pic": udata_doctor.profile_pic,
                                                                "consultation_fee": udata_doctor.profile.consultation_fee
                                                            };
                                                            var bookingObj = {
                                                                "booking_id": item._id,
                                                                "booking_timings": item.booking_timings,
                                                                "booking_date": item.booking_date,
                                                                "status": item.status,
                                                                "added_by_status": item.added_by_status
                                                            };
                                                            var allData={reference_user:ref_output,doctor_details:doctor_details,booking_details: bookingObj};
                                                            allPatients.push(allData);
                                                        }
                                                    }
                                                    //console.log('hi');
                                                    next();
                                                });                                        
                                            }
                                        }else{
                                            next();  
                                        }
                                    });
                                }
                            }, function (){
                                //check length
                                if(allPatients.length > 0){
                                    //callback                                
                                    callback({success: true, message: "List of user details.", data:allPatients});
                                }else{  
                                    //callback                                  
                                    callback({success: true, message: "No patient found!.", data:allPatients});
                                }
                            });
                        }else{
                            callback({success: true, message: "No data found!.", data:[]}); 
                        }                                               
                    }
                })
            }
        },
        /**
        * Doctor accept decline requst by patient
        */
        doctor_accept_decline: function (bookingData, callback) { 
            //init
            var updateData = {};
            var role = bookingData.role;      
            if(!bookingData.booking_id){
                callback({success: false, message: "Booking id is required"});
            }else{
                //check action
                if(bookingData.action == 'accept'){
                    updateData.status = 'accept';
                    updateData.added_by_status = role; 
                }else{
                    updateData.status = 'decline';
                    updateData.added_by_status = role;
                }            
                //update booking status 
                Booking.update({_id: bookingData.booking_id},updateData,function(err,update){
                    //check
                    if (err) {
                        callback({success: false, message: "some error occurred", err: err});
                    }else {
                        //find by id
                        Booking.findOne({_id: bookingData.booking_id})
                        .populate({
                            'path': 'patient_id',
                            'select': '_id name device_token'
                        })
                        .populate({
                            'path': 'doctor_clinic_id',
                            'select': '_id name device_token'
                        })
                        .exec(function(err, bookingdata){
                            if(err){
                                //callback
                                callback({success: false, message: err});
                            }else{
                                console.log('bookingdata', bookingdata);
                                //booking data
                                var bookData = {
                                    id: bookingdata._id,
                                    status:bookingdata.status
                                }
                                var pushTitle ='Status change to ' +updateData.status;                            
                                var pushContent = bookingdata.status + ' by ' + ' ' + role + ' ' + bookingdata.doctor_clinic_id.name;
                                var notificationObject = new Notification({
                                    event_id:bookingdata._id,
                                    from_id:bookingdata.doctor_clinic_id._id,
                                    to_id:bookingdata.patient_id._id,
                                    slug:'status',
                                    message:pushContent,
                                    subject:pushTitle                
                                });
                                notificationObject.save(function(notificationSaveError, notificationSaveData){
                                    if(notificationSaveData){                                           
                                        request.post({
                                            uri: config.PUSH_NOTIFICATION.URL,
                                            headers: {
                                                "Authorization": "key=" + config.PUSH_NOTIFICATION.API_KEY,
                                                "Content-Type": "application/json"
                                            },
                                            body: {
                                                "notification":{
                                                    "title":pushTitle,
                                                    "body":pushContent,
                                                    "sound":"default",
                                                    "click_action":"FCM_PLUGIN_ACTIVITY",
                                                    "icon":"fcm_push_icon",
                                                    "color":"#91be00"
                                                },
                                                "data":{
                                                    "page_name":"notification",
                                                    "notification_id":notificationSaveData._id,
                                                    "post_id":bookingdata._id
                                                },
                                                "to":bookingdata.patient_id.device_token,
                                                "priority":"high",
                                                "restricted_package_name":""
                                            },
                                            json: true
                                        }, function (err, response, body) {
                                            //next();   
                                            callback({success: true, message: "Booking status updated successfully", booking_details: bookData});                                                  
                                        }); //end push notification
                                    }
                                });                                
                            }
                        });                    
                    }
                });
            }
        },
        /**
        * Patient details 
        */
        patientDetails: function (doctor_clinic_id, patient_id, callback) {        
            var doctorClinicObj = [];
            var bookingObj = [];
            var loopArrray=["doctorClinicObj","bookingObj"];
            User.findOne({_id: patient_id,role:'patient'})
            .exec(function (err, result) {                
                if (err) {
                    callback({success: false, err: err});
                }else {
                    if(!result) {
                        callback({success: false, message: "This patient does not exist"});
                    } else {
                        //init
                        var age = '';
                        //check
                        if(result.dob){
                            //dob
                            var dob = new Date(result.dob);
                            //age
                            age = new AgeFromDateString(dob).age;
                        }
                        var patientObj = {
                            "patientid": result._id,  
                            "profile_pic": result.profile_pic,                          
                            "name": result.name,
                            "email": result.email,
                            "mobile": result.mobile, 
                            "address": result.profile.address,
                            "city": result.city, 
                            "country": result.country,                 
                            "height": result.height,
                            "weight": result.weight,
                            "age": age,
                            "gender": result.gender,
                            "bloodgroup": result.bloodgroup,
                            "insurance": result.insurance
                        };
                        //loop
                        asyncLoop(loopArrray, function (item, next){
                            if(item=="doctorClinicObj"){
                                User.findOne({_id: doctor_clinic_id}).exec(function (err, res) {
                                    if (res){                                        
                                        var docCliObj = {
                                            "doctor_clinic_name": res.name                                 
                                        }; 
                                        doctorClinicObj = docCliObj;
                                    }  
                                    next();
                                });
                            }
                            //check
                            if(item=="bookingObj") {
                                var date = new Date();
                                var current_time = date.toLocaleTimeString();                       
                                var cond = {$and:[{patient_id:patient_id}, {doctor_clinic_id:doctor_clinic_id},{booking_timings:{ $gt: current_time }}, {booking_date:{ $gt: date }}]};
                                Booking.find(cond).exec(function(err,book){                 
                                    if (book) {
                                        if (book != null && book != undefined && book!= '') {
                                            bookingObj = book;
                                        }
                                    }
                                    next();
                                })
                            }
                        },function (){
                            //send final response
                            var allData = {patient_details:patientObj, doctor_details:doctorClinicObj, booking_details: bookingObj};
                            //callback    
                            callback({success: true, message: "Sucess", data:allData});
                        });
                    } 
                }
            });
        },
        /**
        * list all category with created category by user
        */
        list_all_mrcategory_single_user:function(userid, patient_id, callback){
            //init
            var allCats = []; 
            //console.log('userid', userid);
            //console.log('patient_id', patient_id);        
            if (patient_id !='' && patient_id != '' && patient_id != undefined) {           
                var patientid = patient_id;        
            }else{
                var patientid = userid;
            }
            //console.log('xpatient_id', patientid);        
            if(!patientid){
                callback({success: false, message: "UserID is required"});
            } else { 
                Category.find({$or:[{$and:[{user_id:patientid}, {added_by: 'patient'}]},{added_by: 'admin'}]},'_id category_name', function (err, all_cats) {    
                    if(err){
                        callback({success: false, err: err});
                    }else{
                        console.log('all_cats', all_cats);
                        var all_medical_records='';
                        if(all_cats != '' && all_cats != undefined && all_cats != null){
                            var loopOnce=[1];
                            asyncLoop(loopOnce, function (item, next){
                                User.findOne({_id:patientid},'medical_records',function (error, allMedicalRecordData) { 
                                    //if(allMedicalRecordData.medical_records !='' && allMedicalRecordData.medical_records !=null && allMedicalRecordData.medical_records !=undefined){
                                    if(allMedicalRecordData !='' && allMedicalRecordData !=null && allMedicalRecordData !=undefined){    
                                        all_medical_records=allMedicalRecordData.medical_records;
                                        console.log("all_medical_records------->",all_medical_records);
                                    }else{
                                        console.log("all_medical_records-------> is blank");
                                    }
                                    next();
                                });
                            }, function (){
                                console.log("all_medical_records===>",all_medical_records);
                                var allDataTobeReturn=[];
                                if(all_cats !=undefined && all_cats!=null && all_cats!=''){
                                    for (var i = 0; i < all_cats.length; i++) {
                                        var matchedMedicalRecords=[];
                                        if(all_medical_records !=undefined && all_medical_records!=null && all_medical_records!=''){
                                            for (var j = 0; j < all_medical_records.length; j++) {
                                                if(all_medical_records[j].mr_category_id == all_cats[i]._id){
                                                    console.log("matched==>"+all_medical_records[j].mr_category_id +"=="+ all_cats[i]._id);
                                                    matchedMedicalRecords.push(all_medical_records[j]);
                                                }else{
                                                    console.log("not matched==>"+all_medical_records[j].mr_category_id +"=="+ all_cats[i]._id);
                                                }
                                            }
                                        }else{
                                            console.log("no medical_records==>"+all_cats[i]);
                                        }
                                        console.log('matchedMedicalRecords', matchedMedicalRecords.length);
                                        var categoryData={
                                            no_of_files: matchedMedicalRecords.length,
                                            category_name: all_cats[i].category_name,
                                            category_id: all_cats[i]._id
                                        }
                                        allDataTobeReturn.push(categoryData);
                                    }
                                }
                                if(allDataTobeReturn.length > 0){
                                    //callback                                
                                    callback({success: true, message: "List of category details.", data:allDataTobeReturn});
                                }else{  
                                    //callback                                  
                                    callback({success: true, message: "No data found!.", data:allDataTobeReturn});
                                }
                            });
                        }else{
                            callback({success: true, message: "No data found!.", data:[]}); 
                        }                   
                    } 
                })
            }
        },
        /**
        * Add medical record category
        */
        addMrcategory:function(userData, userid,callback){
            if(!userid){
                callback({success: false, message: "UserID is required"});
            } else {
                Category.findOne({_user:userid}).exec(function(err,cat){
                    if(cat){
                        //update
                        var updateData = {}; 
                        if(userData.category_name){
                            updateData.category_name = userData.category_name 
                        }                    
                        //update
                        Category.update({_id:pref._id},updateData,function(err,update){
                            if(err){
                                callback({success: false, err: err});
                            } else {
                                callback({success: true, message: "Category updated!"});
                            }
                        })                    
                    } else {
                        //insert
                        var catData = {
                            "added_by": 'patient',
                            "user_id": userid,
                            "category_name": userData.category_name
                        };
                        var category = new Category(catData);
                        category.save(function (err, res) {
                            if (err) {
                                callback({success: false, err: err});
                            } else {
                                callback({success: true, message: "Category inserted!",data: res});
                            }
                        })
                    }
                })            
            }
        },
        /**
        * upload medical record in single medical record category
        */
        upload_medical_record: function(userid, fileData, medicalData, callback){        
            var mr_category_id = medicalData.mr_category_id;
            var record_name = medicalData.record_name;
            if(!userid){
                callback({success: false, message: "userId is required"});
            } else {            
                if(!fileData){
                    callback({success: false, message: "No file selected"});
                } else {
                    // The name of the input field (i.e. "medical_record") is used to retrieve the uploaded file
                    var medicalRecord = fileData.medical_record;                        
                    var ext = '.jpg';
                    var fileName = Date.now() + ext;
                    var imagePath = 'public/uploads/medicalrecord/'+fileName;
                    var medicalrecordimageUrl = config.__site_url + 'uploads/medicalrecord/' + fileName;
                    sharp(medicalRecord.data)
                    .resize(100, 100)
                    .toFormat('jpeg')
                    .toFile(imagePath,(err, info)=> {
                        // mv() method to place the file somewhere on your server
                        //medicalRecord.mv(imagePath, function(err) {
                        if (err){
                            callback({success: false, message: "File uploading error", err: err});
                        } else {                        
                            //object id for medical_record
                            var medical_record_id = mongoose.Types.ObjectId();
                            //medical object
                            var medicalObj = {
                                "medical_record_id": medical_record_id, 
                                "mr_category_id": mr_category_id,
                                "record_name": record_name,                           
                                "medicalrecordimage": medicalrecordimageUrl
                            }; 
                            console.log('medicalObj', medicalObj);   
                            //update user data
                            User.update({_id:userid}, { $push: {"medical_records":medicalObj}}, function (err, res) {
                                if (err) {
                                    callback({success: false, message: "some error occurred", err: err});
                                } else {
                                    callback({success: true, message: "Medical record updated successlully", data:medicalObj});
                                }
                            });
                        }
                    });
                    //});
                }
            }
        },
        /**
        * list all category with created category by user
        */
        list_all_medical_record_single_category_single_user:function(userid, medicalData, patient_id, callback){
            //init
            var allRecords = []; 
            var mr_category_id = medicalData.mr_category_id;
            if (patient_id !='' && patient_id != '' && patient_id != undefined) {           
                var patientid = patient_id;        
            }else{
                var patientid = userid;
            }
            if(!patientid){
                callback({success: false, message: "PatientID is required"});
            } else { 
                User.findOne({_id:patientid},function (err, all_medical_record) {    
                    if(err){
                        callback({success: false, err: err});
                    }else{                    
                        if(all_medical_record != '' && all_medical_record != undefined && all_medical_record != null){                  
                            var allData=[];
                            //console.log(all_medical_record.medical_records);
                            if(all_medical_record.medical_records != '' && all_medical_record.medical_records != undefined && all_medical_record.medical_records != null){ 
                                for (var i =0; i < all_medical_record.medical_records.length; i++) {
                                    if(all_medical_record.medical_records[i].mr_category_id == mr_category_id){
                                        console.log(i);
                                        allData.push(all_medical_record.medical_records[i]);
                                    }
                                }
                                callback({success: true, message: "List of category details.", data:allData});
                            }else{
                                callback({success: true, message: "No data found!.", data:[]});
                            }    
                        }else{
                            callback({success: true, message: "No data found!.", data:[]}); 
                        }                    
                    } 
                })
            }
        },
        /**
        * list all category with created category by patient
        */
        list_all_mrcategory_single_patient:function(userid, patient_id, callback){
            //init
            var allCats = []; 
            if(!userid){
                callback({success: false, message: "UserID is required"});
            } else { 
                Category.find({$or:[{$and:[{user_id:patient_id}, {added_by: 'patient'}]},{added_by: 'admin'}]},'_id category_name', function (err, all_cats) {    
                    if(err){
                        callback({success: false, err: err});
                    }else{
                        console.log('all_cats', all_cats);
                        var all_medical_records='';
                        if(all_cats != '' && all_cats != undefined && all_cats != null){
                            var loopOnce=[1];
                            asyncLoop(loopOnce, function (item, next){
                                User.findOne({_id:patient_id},'medical_records',function (error, allMedicalRecordData) { 
                                    //if(allMedicalRecordData.medical_records !='' && allMedicalRecordData.medical_records !=null && allMedicalRecordData.medical_records !=undefined){
                                    if(allMedicalRecordData !='' && allMedicalRecordData !=null && allMedicalRecordData !=undefined){    
                                        all_medical_records=allMedicalRecordData.medical_records;
                                        console.log("all_medical_records------->",all_medical_records);
                                    }else{
                                        console.log("all_medical_records-------> is blank");
                                    }
                                    next();
                                });
                            }, function (){
                                console.log("all_medical_records===>",all_medical_records);
                                var allDataTobeReturn=[];
                                if(all_cats !=undefined && all_cats!=null && all_cats!=''){
                                    for (var i = 0; i < all_cats.length; i++) {
                                        var matchedMedicalRecords=[];
                                        if(all_medical_records !=undefined && all_medical_records!=null && all_medical_records!=''){
                                            for (var j = 0; j < all_medical_records.length; j++) {
                                                if(all_medical_records[j].mr_category_id == all_cats[i]._id){
                                                    console.log("matched==>"+all_medical_records[j].mr_category_id +"=="+ all_cats[i]._id);
                                                    matchedMedicalRecords.push(all_medical_records[j]);
                                                }else{
                                                    console.log("not matched==>"+all_medical_records[j].mr_category_id +"=="+ all_cats[i]._id);
                                                }
                                            }
                                        }else{
                                            console.log("no medical_records==>"+all_cats[i]);
                                        }
                                        var categoryData={                                        
                                            category_name: all_cats[i].category_name,
                                            category_id: all_cats[i]._id
                                        }
                                        allDataTobeReturn.push(categoryData);
                                    }
                                }
                                if(allDataTobeReturn.length > 0){
                                    //callback                                
                                    callback({success: true, message: "List of category details.", data:allDataTobeReturn});
                                }else{  
                                    //callback                                  
                                    callback({success: true, message: "No data found!.", data:allDataTobeReturn});
                                }
                            });
                        }else{
                            callback({success: true, message: "No data found!.", data:[]}); 
                        }                   
                    } 
                })
            }
        },
        /**
        * doctor add notes for patient
        */
        doctor_add_notes_for_patient:function(data, userData, callback){      
            var patient_id = userData.patient_id;
            var category_id = userData.category_id;
            var note_added_date = userData.note_added_date;
            var note_title = userData.note_title;
            var doctor_note = userData.doctor_note;
            var booking_id = userData.booking_id;
            if(!data.id){
                callback({success: false, message: "UserID is required"});
            } else {   
                if(!patient_id){        
                    callback({success: false, message: "Patient id is required"});
                }else{    
                    //check friend id
                    if(userData){
                        var new_id = mongoose.Types.ObjectId();                
                        var updateData = {id:new_id, category_id:category_id, booking_id:booking_id, note_added_date:note_added_date, note_title:note_title, doctor_note:doctor_note, doctor_id:data.id}; 
                    }  
                    //console.log(updateData);                        
                    //update user data
                    User.update({_id:patient_id}, { $push: {"doctors_notes":updateData}}, {multi:true}, function (err, res) {
                        if (err) {
                            callback({success: false, message: "some error occurred", err: err});
                        } else {
                            //find by id
                            User.findOne({_id: patient_id},function (err, result) {
                                if(err){
                                    //callback
                                    callback({success: false, message: err});
                                }else{
                                    var pushTitle ='Note added.';                            
                                    var pushContent = 'Note added by '+ data.role;
                                    var notificationObject = new Notification({
                                        event_id:new_id,
                                        from_id:data._id,
                                        to_id:patient_id,
                                        slug:'note',
                                        message:pushContent,
                                        subject:pushTitle                
                                    });
                                    notificationObject.save(function(notificationSaveError, notificationSaveData){
                                        if(notificationSaveData){                                           
                                            request.post({
                                                uri: config.PUSH_NOTIFICATION.URL,
                                                headers: {
                                                    "Authorization": "key=" + config.PUSH_NOTIFICATION.API_KEY,
                                                    "Content-Type": "application/json"
                                                },
                                                body: {
                                                    "notification":{
                                                        "title":pushTitle,
                                                        "body":pushContent,
                                                        "sound":"default",
                                                        "click_action":"FCM_PLUGIN_ACTIVITY",
                                                        "icon":"fcm_push_icon",
                                                        "color":"#91be00"
                                                    },
                                                    "data":{
                                                        "page_name":"notification",
                                                        "notification_id":notificationSaveData._id,
                                                        "post_id":new_id
                                                    },
                                                    "to":result.device_token,
                                                    "priority":"high",
                                                    "restricted_package_name":""
                                                },
                                                json: true
                                            }, function (err, response, body) {
                                                //next();   
                                                callback({success: true, message: "Doctor add notes for patient successfully.", userid: data.id});                                                  
                                            }); //end push notification
                                        }
                                    });
                                    //callback({success: true, message: "Doctor add notes for patient successfully.", userid: userid});
                                }
                            });        
                        }
                    });
                }                
            }
        },
        /**
        * list all note of a patient posted by single doctor against single category
        */
        list_all_note_of_a_patient_posted_by_single_doctor_against_single_category:function(userid, patient_id, medicalData, callback){   
            var allData = []; 
            var allNotes = [];       
            var mr_category_id = medicalData.mr_category_id;
            var booking_id = medicalData.booking_id;
            console.log('booking_id', booking_id);
            async.waterfall([
                noteDetails, 
                userDetails
            ], function (error, message, response) {
                if(error){
                    //callback                                
                    callback({success: false, message:error});
                }else{  
                    //callback                                  
                    callback({success: true,  message:message, data:response});
                }
            });
            function noteDetails (callback) {    
                User.findOne({_id:patient_id},function (err, all_record) { 
                    if(err){
                        callback(err);
                    }                   
                    if(all_record != '' && all_record != undefined && all_record != null){
                        if(all_record.doctors_notes != '' && all_record.doctors_notes != undefined && all_record.doctors_notes != null){
                            for (var i =0; i < all_record.doctors_notes.length; i++) {
                                if(all_record.doctors_notes[i].category_id == mr_category_id && all_record.doctors_notes[i].doctor_id == userid){                                
                                    var single_doctor_note = all_record.doctors_notes[i];
                                    allNotes.push(single_doctor_note);                                
                                }
                                if(!mr_category_id){
                                    if(all_record.doctors_notes[i].doctor_id == userid){
                                        var single_doctor_note = all_record.doctors_notes[i];
                                        allNotes.push(single_doctor_note);                                
                                    }
                                }                               
                                if(all_record.doctors_notes[i].doctor_id !== userid){
                                    var single_doctor_note = all_record.doctors_notes[i];
                                    allNotes.push(single_doctor_note);                                
                                }
                                if(all_record.doctors_notes[i].booking_id == booking_id){
                                    console.log(all_record.doctors_notes[i].booking_id);
                                    var single_doctor_note = all_record.doctors_notes[i];
                                    allNotes.push(single_doctor_note);                                
                                }
                            }
                            callback(null, allNotes);
                        }else{
                            callback('No doctor notes found!.');        
                        }    
                    }else{
                        callback('No data found!.'); 
                    }
                });
            }
            function userDetails (allNotes, callback) { 
                if(allNotes.length > 0){
                    asyncLoop(allNotes, function (item, next){
                        if(item){                    
                            Category.findOne({_id:item.category_id}).select('_id category_name').exec(function(err,cat){        
                                if(cat){
                                    User.findById({_id:item.doctor_id}).select('_id name profile_pic').exec(function(err_u, user_details){     
                                        if(user_details){                                               
                                            var newInnerObject = {                                
                                                note_title:item.note_title,
                                                doctor_note:item.doctor_note,
                                                note_added_date:item.note_added_date,
                                                category_name:cat.category_name,
                                                noted_by_name:user_details.name,
                                                noted_by_profile_pic:user_details.profile_pic
                                            };
                                            allData.push(newInnerObject);                                     
                                        }
                                        next();
                                    });
                                }else{
                                    next();
                                }
                            });
                        }else{
                            next();
                        }    
                    }, function (){
                        callback(null, allData);
                    });
                }else{
                    callback('No data found');    
                }
            }   
        },
        /**
        * Make Paypal 
        */
        /*makePayment: function(ccData, callback){
            //console.log("CCDAta : ",ccData);        
            var userid = ccData.id;
            console.log('userid', ccData.id);
            var create_payment_json = {
                "intent": "sale",
                "payer": {
                    "payment_method": "credit_card",
                    "funding_instruments": [{
                        "credit_card": {
                            "type": ccData.cardType,
                            "number": ccData.card_number,
                            "expire_month": ccData.expire_mm,
                            "expire_year": ccData.expire_yy,
                            "cvv2": ccData.cvv2,
                            "first_name": ccData.fname,
                            "last_name": ccData.lname
                        }
                    }]
                },
                "transactions": [{
                    "amount": {
                        "total": ccData.amount,
                        "currency": "USD"
                    },
                    "description": ccData.desc
                }]
            };
            paypal.payment.create(create_payment_json, function (error, payment) {
                if (error) {                                
                    callback({ success: false, message:"Payment unsuccessful",error:error });
                } else {                
                    var saveData = {};
                    saveData.user_id = userid;
                    saveData.type = ccData.type;
                    saveData.transaction_id = payment.id;
                    saveData.amount_paid = ccData.amount + ' USD';
                    saveData.description = ccData.paydesc;
                    saveData.transaction_date = payment.create_time;                
                    var payment = new Payment(saveData);
                    payment.save(function (err, response) {
                        if (err) {
                            callback({success: false, message: "Error while saving", Error: err});
                        } else {  
                            console.log('Paypal response', response);                          
                            callback({success: true, message: "Payment successfull", data:response});
                        }
                    });
                }
            });  
        },*/
        /**
        * Get all payment by single user id
        */
        /*paymentHistory: function(userid, callback){ 
            var sort_field = 'createdAt';
            var order = '-1';   //decending        
            Payment.find({user_id:userid}).sort([[sort_field, order]])            
            .exec(function (err, result) {                
                if (err) {
                    callback({success: false, err: err});
                }else {
                    if(!result) {
                        callback({success: false, message: "No data found."});
                    } else {
                        callback({success: true, message: "Success", data:result});
                    } 
                }
            });           
        },*/
        /**
        * Contact us
        */
        contactUs: function (userid, userData, callback) {
            async.waterfall([
                addContact         
            ], function (error, message, response) {
                if(error){
                    //callback                                
                    callback({success: false, message:error});
                }else{  
                    //callback                                  
                    callback({success: true, message:message, data:response});
                }
            }); 
            function addContact (callback) { 
                /*User.findById({userid}).exec(function (err, userDetails) {
                    if(err){
                        callback(err);
                    }*/ 
                    //console.log('userDetails', userDetails);
                    var contactObject = new Contact({
                        user_id: userid,
                        name: userData.name,
                        email: userData.email,
                        phone: userData.phone,
                        subject: userData.subject,
                        message: userData.message
                    });
                    //save contact data
                    contactObject.save(function(err, contactSaveData){                     
                        if (err) {
                            callback(err);
                        }
                        var mailArray = [
                            {
                                email_id:userData.email,
                                subject:'Contact Request - Aqare App',
                                mailContent:'Hi '+userData.name+', <br><br>Contact request submited successfully.'
                            },
                            { 
                                email_id: config.EMAIL_ADDRESS.DEFAULT_ADMIN_EMAIL,
                                subject: 'Contact Request - Aqare App' ,   
                                mailContent:'Hello Admin, <br><br>'+userData.name+' has submitted contact request. Details are as follows: <br></br>Name:' +userData.name+'<br>Email:' +userData.email+'<br> Phone:' +userData.phone+'<br> Subject:' +userData.subject+'<br> Message:' +userData.message
                            }
                        ];
                        sendMailToMultipleUsers(mailArray);
                        callback(null, 'Successfully submited.', contactSaveData);                    
                    });
                    //});    
                }    
            },
            /**
            * Get all pages
            */    
            getpageContent:function(page_name, callback) {
                PageModel.findOne({page_name:page_name}, function (err, page_content) {            
                    if (err) {
                        callback({success: false, message:"Unable to get the page", error: err});             
                    }else{                
                        callback({success: true, message:"Success", data: page_content});               
                    }
                });  
            },  
            /**
            * Add rating
            */
            addRating: function(userid, ratingData, callback){ 
                //to id
                var toId = ratingData.to_id; 
                async.waterfall([
                    addMutiRating,         
                    sendNotification
                ], function (error, message, response) {
                    if(error){
                        //callback                                
                        callback({success: false, message:error});
                    }else{  
                        //callback                                  
                        callback({success: true, message:message, data:response});
                    }
                });
                function addMutiRating (callback) {
                    var speed = 0, quality = 0, efficiency = 0, price = 0, avg_rating = 0;
                    //speed 
                    if(ratingData.speed != '' && ratingData.speed != null && ratingData.speed != undefined){
                        speed = ratingData.speed;   
                    }
                    //quality
                    if(ratingData.quality != '' && ratingData.quality != null && ratingData.quality != undefined){
                        quality = ratingData.quality;   
                    }
                    //efficiency
                    if(ratingData.efficiency != '' && ratingData.efficiency != null && ratingData.efficiency != undefined){
                        efficiency = ratingData.efficiency;   
                    }         
                    //price
                    if(ratingData.price != '' && ratingData.price != null && ratingData.price !=undefined){
                        price = ratingData.price;   
                    }
                    //average rating
                    avg_rating = (parseFloat(speed) + parseFloat(quality) + parseFloat(efficiency) + parseFloat(price)) / 4;
                    Rating.count({})
                    .where({from_id:userid})
                    .where({to_id:toId})
                    .exec(function(err,rate){                        
                        if(rate > 0){
                            var conditions = {from_id:userid, to_id:toId},
                            fields = {speed: speed, quality: quality, efficiency: efficiency, price: price,
                                avg_rating: avg_rating, comment:ratingData.review},
                                options = {multi: true}; 
                                Rating.update(conditions, fields, options, function (err, ratingSaveData) {
                                    if (err){ 
                                        callback(null);
                                    }
                                    callback(null, ratingSaveData);
                                });
                            }else{
                                var ratingObject = new Rating({
                                    from_id:userid,
                                    to_id:toId,
                                    speed:speed,
                                    quality:quality,
                                    efficiency:efficiency,
                                    price:price,
                                    avg_rating:avg_rating,
                                    comment:ratingData.review
                                });
                                //save rating data
                                ratingObject.save(function(ratingSaveError, ratingSaveData){                     
                                    if (ratingSaveError) {
                                        callback(ratingSaveError);
                                    }else{
                                        callback(null, ratingSaveData);
                                    }    
                                });
                            }
                        });        
                    }
                    function sendNotification (ratingSaveData, callback) {
                        var pushTitle ='Rating';
                        var pushContent = 'New rating added.';
                        //dummy event id
                        var event_id = mongoose.Types.ObjectId();
                        var notificationObject = new Notification({
                            event_id:event_id,
                            from_id:userid,
                            to_id:toId,
                            slug:'rating',
                            message:pushContent,
                            subject:pushTitle                
                        });            
                        User.findOne({_id:toId}).exec(function(err, userData){  
                            if(err){
                                callback(err);
                            }  
                            if(userData){
                                notificationObject.save(function(notificationSaveError, notificationSaveData){
                                    if(notificationSaveData){                                                             
                                        request.post({
                                            uri: config.PUSH_NOTIFICATION.URL,
                                            headers: {
                                                "Authorization": "key=" + config.PUSH_NOTIFICATION.API_KEY,
                                                "Content-Type": "application/json"
                                            },
                                            body: {
                                                "notification":{
                                                    "title":pushTitle,
                                                    "body":pushContent,
                                                    "sound":"default",
                                                    "click_action":"FCM_PLUGIN_ACTIVITY",
                                                    "icon":"fcm_push_icon",
                                                    "color":"#91be00"
                                                },
                                                "data":{
                                                    "page_name":"notification",
                                                    "notification_id":notificationSaveData._id,
                                                    "post_id":event_id
                                                },
                                                "to":userData.device_token,
                                                "priority":"high",
                                                "restricted_package_name":""
                                            },
                                            json: true
                                        }, function (err, response, body) {
                                            //next();   
                                            callback(null, 'Rating added successfully.', event_id);                                                         
                                        }); //end push notification
                                    }
                                });
                            }    
                        });    
                    }               
                },
                /**
                * Patient recomendation
                */
                patientRecomendation: function(patientId, callback){ 
                    var allRecommendation = [];  
                    if(!patientId){
                        callback({success: false, message: "PatientID is required"});
                    }else{
                        //find by user id and quiz id from user table
                        User.find({account_active:'yes', $or:[{role:'doctor'},{role:'clinic'}]}).select('name rating').exec(function (err, all_users) {            
                            if (err) {                
                                callback({success: false, message:"Unable to get user.", data:""});
                            }else{                    
                                if(all_users !=undefined && all_users!=null && all_users!=''){
                                    for (var i =0; i < all_users.length; i++) {
                                        var all_users_data = all_users[i];
                                        if(all_users_data.rating !=undefined && all_users_data.rating!=null && all_users_data.rating!=''){
                                            console.log('all_users_data', all_users_data.rating);
                                            for (var j = 0; j < all_users_data.rating.length; j++) {
                                                if(all_users_data.rating[j].patient_id == patientId){
                                                    console.log(j);
                                                    var patientRecomend = all_users_data.rating[j];                                                                    
                                                }
                                            } 
                                        }
                                        console.log('patientRecomend', patientRecomend);
                                        //Recommendation object
                                        var recommendationObj = {
                                            /*"name": single_notification_data._id,  */                          
                                            "speed": patientRecomend.speed,
                                            "quality": patientRecomend.quality,
                                            "efficiency": patientRecomend.efficiency,
                                            "price": patientRecomend.price,
                                            "review": patientRecomend.review, 
                                        };
                                        allRecommendation.push(recommendationObj);                                                       
                                    }
                                }
                                var allData = {
                                    allRecommendation:allRecommendation
                                };
                                if(allData.length > 0){
                                    //callback                                
                                    callback({success: true, message: "Patient recomendation.", data:allData});
                                }else{  
                                    //callback                                  
                                    callback({success: true, message: "No data found!.", data:""});
                                }               
                            }
                        });
                    }           
                },
                /**
                * Doctor can view patient rating
                */
                view_patient_rating_by_doctor: function(userID, callback){
                    var allRating = [];   
                    if(!userID){
                        callback({success: false, message: "userID is required"});
                    }else{
                        //find by user id and quiz id from user table
                        User.findOne({_id:userID}).exec(function (err, all_users) {            
                            if (err) {                
                                callback({success: false, message:"Unable to get user.", data:""});
                            }else{                    
                                if(all_users != '' && all_users != undefined && all_users != null){                                               
                                    //console.log('all_users', all_users);
                                    if(all_users.rating != '' && all_users.rating != undefined && all_users.rating != null){    
                                        //console.log('rating', all_users.rating);                            
                                        asyncLoop(all_users.rating, function (item, next){    
                                            //console.log('item', item.createdAt); 
                                            //var aDay = 24 * 60 * 60 * 1000;   
                                            //convert it in unixTimestamp (ie milisecond)                            
                                            var unixTimestamp = new Date(item.createdAt).valueOf();
                                            //var rate_time_ago = time_ago(new Date(unixTimestamp - aDay));
                                            var rate_time_ago = time_ago_in_words(new Date(unixTimestamp) - 1000 * 60);
                                            //find by id
                                            User.findOne({_id:item.patient_id, account_active:'yes'},function (err, userData) {
                                                //check if error is not exist
                                                if(!err){
                                                    //uData
                                                    if(userData){
                                                        //add rate object
                                                        var rateObj = {
                                                            "_id": userData._id,
                                                            "patient_name": userData.name,
                                                            "patient_picture": userData.profile_pic,
                                                            "speed": item.speed,
                                                            "quality": item.quality,
                                                            "efficiency": item.efficiency,
                                                            "price": item.price,
                                                            "review": item.review,                 
                                                            "createdAt": item.createdAt,
                                                            "time_ago": rate_time_ago 
                                                        };
                                                        allRating.push(rateObj);
                                                    }
                                                }
                                                next();
                                            });
                                        }, function (){
                                            console.log('allRating.length', allRating.length);
                                            //check length
                                            if(allRating.length > 0){
                                                //callback                                
                                                callback({success: true, message: "All rating by patients.", data:allRating});
                                            }else{  
                                                //callback                                  
                                                callback({success: true, message: "No data found!.", data:allRating});
                                            }
                                        });
                                    }else{
                                        callback({success: true, message: "No data found!.", data:[]}); 
                                    }
                                }else{
                                    callback({success: true, message: "No data found!.", data:[]});
                                }            
                            }
                        });
                    }           
                },
                /**
                * Appointment cancel by patient, doctor and clinic 
                */
                appointment_cancel_by_patient: function(data, booking, callback){
                    var bookingid = booking.bookingid; 
                    var added_by_status = data.role;
                    //var added_by_status = booking.role; 
                    async.waterfall([
                        appionmentCancel,
                        notification
                    ], function (error, message, response) {
                        if(error){
                            //callback                                
                            callback({success: false, message:error});
                        }else{  
                            //callback                                  
                            callback({success: true, message:message, data:response});
                        }
                    });
                    function appionmentCancel(callback) {
                        if(!bookingid){
                            callback('Booking id is required');
                        }else{      
                            var booking_cancel_date = new Date(Date.now()).toISOString();
                            var query = {_id: bookingid};
                            Booking.findOneAndUpdate(query,{status:'cancel', booking_cancel_date:booking_cancel_date, added_by_status: added_by_status},function (err,book) {
                                if (err){
                                    callback('Unable to process your request!.');
                                }else if(book){
                                    callback(null, book);
                                }else{
                                    callback('Unable to delete booking.');
                                }
                            });
                        }
                    }
                    function notification(book, callback) {                                   
                        Booking.findOne({_id: bookingid})
                        .populate({
                            'path': 'patient_id',
                            'select': '_id name device_token'
                        })
                        .populate({
                            'path': 'doctor_clinic_id',
                            'select': '_id name device_token'
                        })
                        .exec(function(err, bookingDetails){                     
                            if(err){
                                callback(err);
                            }  
                            if(bookingDetails){
                                var pushTitle ='Status changed to cancel';
                                var pushContent = data.role+ ' '+data.name+ ' changed the status to cancel';
                                var notificationObject = new Notification({
                                    event_id:bookingid,
                                    from_id:bookingDetails.patient_id._id,
                                    to_id:bookingDetails.doctor_clinic_id._id,
                                    slug:'status',
                                    message:pushContent,
                                    subject:pushTitle                
                                }); 
                                notificationObject.save(function(notificationSaveError, notificationSaveData){
                                    if(notificationSaveData){                                                             
                                        request.post({
                                            uri: config.PUSH_NOTIFICATION.URL,
                                            headers: {
                                                "Authorization": "key=" + config.PUSH_NOTIFICATION.API_KEY,
                                                "Content-Type": "application/json"
                                            },
                                            body: {
                                                "notification":{
                                                    "title":pushTitle,
                                                    "body":pushContent,
                                                    "sound":"default",
                                                    "click_action":"FCM_PLUGIN_ACTIVITY",
                                                    "icon":"fcm_push_icon",
                                                    "color":"#91be00"
                                                },
                                                "data":{
                                                    "page_name":"notification",
                                                    "notification_id":notificationSaveData._id,
                                                    "post_id":bookingid
                                                },
                                                "to":bookingDetails.doctor_clinic_id.device_token,
                                                "priority":"high",
                                                "restricted_package_name":""
                                            },
                                            json: true
                                        }, function (err, response, body) {
                                            //next();   
                                            callback(null, 'Booking canceled successfully.', bookingid);                                                         
                                        }); //end push notification
                                    }
                                });
                            }    
                        });
                    }        
                },

                /**
                 * Rescheduled booking time by doctor
                 */
                rescheduled_booking_time_by_doctor: function(booking, user, callback){

                    var bookingid = booking.bookingid;        
                    //var patient_id = booking.patient_id;
                    var userid = user.id;
                    var role = user.role; 
                    var doctor_clinic_name = user.name;
                    //var role = booking.role; 
                    //var doctor_clinic_name = booking.doctor_clinic_name;  

                    console.log('userid', userid);
                    console.log('role', role);
                    console.log('doctor_clinic_name', doctor_clinic_name);
                    console.log('bookingid', bookingid);
                    //console.log('patient_id', patient_id);      
                    
                    if(!bookingid){
                        callback({success: false, message: "Booking id is required"});
                    }else{
                        var new_booking_time = booking.booking_timings;      
                        var new_booking_date = new Date(booking.booking_date);
                        var date_formate = new_booking_date.toDateString();

                        //var query = {_id: bookingid, patient_id:patient_id};
                        /*Booking.findOneAndUpdate(query,{booking_date:new_booking_date, booking_timings:new_booking_time , status:'rescheduled', added_by_status:role},function (err,book) {*/

                        //var conditions = {_id: bookingid, patient_id:patient_id},
                        var conditions = {_id: bookingid},
                        fields = {booking_date: new_booking_date,  booking_timings:new_booking_time , status:'rescheduled', added_by_status:role},
                        options = {multi: true};
                        Booking.update(conditions, fields, options, function (err, book) {
                            //console.log('err', err);
                            if (err){
                                callback({success: false, message: "Unable to process your request!.", data:""});
                            }else if(book){
                                //console.log('book', book);
                                //find by id
                                /*Booking.findById({_id: bookingid, patient_id:patient_id},function (err, bookingdata) {*/
                                Booking.findById({_id: bookingid},function (err, bookingdata) {    
                                    if(err){
                                        //callback
                                        callback({success: false, message: err});
                                    }else{
                                        if(role == 'doctor' || role == 'clinic'){ 
                                            var message = 'Your appionment with doctor'+' '+doctor_clinic_name+' has been rescheduled. Your new timing of appionment is'+' '+ new_booking_time + ' on '+date_formate;  
                                            var subject = "Rescheduled";  
                                            var device_token = bookingdata.patient_id.device_token;  
                                            var pushTitle = subject;
                                            var pushContent =  message;              
                                            var notficationObj = {
                                                "event_id": bookingid,
                                                "from_id": userid, 
                                                /*"to_id": patient_id,*/
                                                "to_id": bookingdata.patient_id,
                                                "slug": 'status',
                                                "message": message,
                                                "subject": subject                
                                            };                                
                                        }
                                        
                                        if(role == 'patient'){    
                                            var message = 'Patient'+' '+doctor_clinic_name+' has been sent a request for rescheduled appionment timing. New timing of appionment is'+' '+ new_booking_time + ' on '+date_formate;  
                                            var subject = "Rescheduled";  
                                            var device_token = bookingdata.doctor_clinic_id.device_token; 
                                            var pushTitle = subject;
                                            var pushContent =  message;                    
                                            var notficationObj = {
                                                "event_id": bookingid,
                                                /*"from_id": patient_id,*/ 
                                                "from_id": bookingdata.patient_id,
                                                /*"to_id": userid,*/
                                                "to_id": userid,
                                                "slug": 'status',
                                                "message": message,
                                                "subject": subject                
                                            };                                
                                        }    
                                        var notificationObject = new Notification(notficationObj);
                                        
                                        notificationObject.save(function(notificationSaveError, notificationSaveData){
                                            if(notificationSaveData){

                                                if(device_token !=''){                                           
                                                    request.post({
                                                        uri: config.PUSH_NOTIFICATION.URL,
                                                        headers: {
                                                            "Authorization": "key=" + config.PUSH_NOTIFICATION.API_KEY,
                                                            "Content-Type": "application/json"
                                                        },
                                                        body: {
                                                            "notification":{
                                                                "title":pushTitle,
                                                                "body":pushContent,
                                                                "sound":"default",
                                                                "click_action":"FCM_PLUGIN_ACTIVITY",
                                                                "icon":"fcm_push_icon",
                                                                "color":"#91be00"
                                                            },
                                                            "data":{
                                                                "page_name":"notification",
                                                                "notification_id":notificationSaveData._id,
                                                                "post_id":bookingid
                                                            },
                                                            "to":device_token,
                                                            "priority":"high",
                                                            "restricted_package_name":""
                                                        },
                                                        json: true
                                                    }, function (err, response, body) {
                                                        //next();   
                                                        callback({success: true, message: "Booking status updated successfully", booking_details: bookingdata});                                                  
                                                    }); //end push notification
                                                }else{
                                                    callback({success: true, message: "Booking status updated successfully", booking_details: bookingdata});
                                                }    
                                            }
                                        });
                                    }
                                });                           
                            }else{
                                callback({success: false, message: "Unable to update previous booking time.", data:""});
                            }
                        });
                    }    
                },
                    /**
                    * Booking status change by patient or doctor
                    */
                    booking_status_change: function(booking, callback){
                        var bookingid = booking.bookingid; 
                        var action = booking.action;       
                        if(!bookingid){
                            callback({success: false, message: "Booking id is required"});
                        }else{
                            if(action !='' && action !=null && action !=undefined){
                                if(action == 'accept'){
                                    var status = 'accept';
                                    var added_by_status = 'patient';
                                }else if(action == 'cancel'){
                                    var status = 'cancel';
                                    var added_by_status = 'patient';
                                }else{
                                    //do nothing
                                }
                            }            
                            var query = {_id: bookingid};
                            Booking.findOneAndUpdate(query,{status:status, added_by_status:added_by_status},{new:true},function (err,book) {
                                if (err){
                                    callback({success: false, message: "Unable to process your request!.", data:""});
                                }else if(book){
                                    callback({success: true, message: "Status updated successfully.", data:book});
                                }else{
                                    callback({success: false, message: "Unable to update status.", data:""});
                                }
                            });
                        }    
                    },
                    /**
                    * Notification list
                    */
                    /*notification_list:function(userid,pageno,callback){
                        var all_obj = [];
                        var page = (!pageno) ? 1 : parseInt(pageno);        
                        var limit = 15;
                        if(!userid){
                            callback({success:false,message:"UserId is required"});
                        } else {
                            User.findOne({_id:userid},function (err, userData) {            
                                if (err) {                
                                    callback({success: false, message:"Unable to get user", data:""});
                                }else{
                                    if(userData){
                                        console.log('userData', userData);
                                        var user_created_at = userData.createdAt;
                                        Notification.find({'createdAt': {'$gte': user_created_at}})                
                                        .sort({createdAt: -1})
                                        .paginate(page, limit)
                                        .lean()
                                        .exec(function (err, notification) {
                                            if(err){
                                                callback({success: false, error:err});
                                            } else {
                                                if(notification !=undefined && notification!=null && notification!=''){
                                                    for (var i =0; i < notification.length; i++) {
                                                        var notification_read = 'no';
                                                        var single_notification_data = notification[i];
                                                        //console.log('news', single_notification_data);
                                                        if(single_notification_data.isRead !=undefined && single_notification_data.isRead!=null && single_notification_data.isRead!=''){ 
                                                            //console.log('isRead', single_notification_data.isRead);
                                                            for (var j = 0; j < single_notification_data.isRead.length; j++) {   
                                                                if(single_notification_data.isRead[j].userid == userid){
                                                                    notification_read = 'yes';                            
                                                                }else{
                                                                    notification_read = 'no'; 
                                                                }
                                                                //console.log('notification_read', notification_read);
                                                            } 
                                                        }                                           
                                                        //notify object
                                                        var notifyObj = {
                                                            "_id": single_notification_data._id,
                                                            "event_id": single_notification_data.event_id,
                                                            "message": single_notification_data.message,
                                                            "subject": single_notification_data.subject,
                                                            "isRead": notification_read,
                                                            "notify_date": single_notification_data.createdAt, 
                                                        };
                                                        all_obj.push(notifyObj);                                                       
                                                    } 
                                                    var unread_counts = 1;                                        
                                                    for (var i =0; i < all_obj.length; i++) {
                                                        if(all_obj[i].isRead == 'no'){
                                                            console.log(i);                                                                
                                                            var total_unread_notification = unread_counts++;
                                                        }
                                                    } 
                                                    if(total_unread_notification >= 0){
                                                        var total_unread_notification = total_unread_notification;
                                                    }else{
                                                        var total_unread_notification = 0;
                                                    }
                                                    var notification_Obj = {
                                                        "all_obj": all_obj,                            
                                                        "unread_notification": total_unread_notification                                 
                                                    }; 
                                                    callback({success: true, message:"Notification List.", data: notification_Obj});                    
                                                }else{
                                                    var notification_Obj = {
                                                        all_obj: []
                                                    };  
                                                    callback({success: true, message: "No data found!.", data:notification_Obj});                           
                                                }                        
                                            } 
                                        });
                                    }
                                }
                            });    
                        }
                    },*/
                    /**
                    * Read message
                    */
                    /*read_message: function (userid, notification_id, callback) { 
                        var all_obj = [];
                        if(!userid){
                            callback({success: false, message: "userId is required"});
                        } else {            
                            if(!notification_id){
                                callback({success: false, message: "notification id is required"});
                            } else {                
                                console.log(notification_id);       
                                var allObj = {
                                    "userid": userid,
                                    "staus": 'Read'
                                };
                                var notificationObj = {
                                    "notification_id": notification_id
                                }
                                //update news data
                                Notification.update({_id:notification_id}, { $push: {"isRead":allObj}}, function (err, res) {                    
                                    if (err) {
                                        callback({success: false, message: "Some error occurred", err: err});
                                    } else {                        
                                        Notification.find('_id').exec(function (err, notification) {
                                            if(err){
                                                callback({success: false, error:err});
                                            } else {
                                                if(notification !=undefined && notification!=null && notification!=''){
                                                    for (var i =0; i < notification.length; i++) {
                                                        var notification_read = 'no';
                                                        var single_notification_data = notification[i];
                                                        if(single_notification_data.isRead !=undefined && single_notification_data.isRead!=null && single_notification_data.isRead!=''){ 
                                                            for (var j = 0; j < single_notification_data.isRead.length; j++) {   
                                                                if(single_notification_data.isRead[j].userid == userid){
                                                                    notification_read = 'yes';                            
                                                                }else{
                                                                    notification_read = 'no'; 
                                                                }
                                                            } 
                                                        }                                       
                                                        //notify object
                                                        var notifyObj = {
                                                            "_id": single_notification_data._id,
                                                            "event_id": single_notification_data.event_id,
                                                            "message": single_notification_data.message,
                                                            "subject": single_notification_data.subject,
                                                            "isRead": notification_read,
                                                            "postedDate": single_notification_data.createdAt, 
                                                        };
                                                        all_obj.push(notifyObj);                                                       
                                                    } 
                                                    var unread_counts = 1;
                                                    for (var i =0; i < all_obj.length; i++) {
                                                        if(all_obj[i].isRead == 'no'){
                                                            console.log(i);                                                                
                                                            var total_unread_notification = unread_counts++;
                                                        }
                                                    } 
                                                    if(total_unread_notification >= 0){
                                                        var total_unread_notification = total_unread_notification;
                                                    }else{
                                                        var total_unread_notification = 0;
                                                    }
                                                    var notification_Obj = {
                                                        "read_notification_id": notificationObj,                            
                                                        "unread_notification": total_unread_notification
                                                    }; 
                                                    callback({success: true, message:"Notification read successlully.", data: notification_Obj});                    
                                                }else{
                                                    callback({success: true, message: "No data found!.", data:[]});
                                                } 
                                            }
                                        });    
                                    }
                                });                                  
                            }
                        }
                    },*/
                    /**
                    * Doctor clinic appointment time
                    */
                    doctor_clinic_timing: function (userid, doctor_clinic_id, callback) {                
                        var allAppoinment = [];
                        var now = new Date();
                        async.waterfall([
                            bookingDetailsone         
                        ], function (error, response) {
                            if(error){
                                //callback                                
                                callback({success: false, message:error});
                            }else{  
                                //callback                                  
                                callback({success: true,  data:response});
                            }
                        });
                        function bookingDetailsone (callback) {                
                            var today = new Date(Date.UTC(now.getUTCFullYear(), now.getUTCMonth(), now.getUTCDate()));
                            Booking.find({doctor_clinic_id:doctor_clinic_id})
                            .where({status: {'$ne':'cancel'}})
                            .where({booking_date: {'$gte':today}})
                            .select('doctor_clinic_id patient_id booking_timings booking_date status')
                            .exec(function (err, bookingDetails) {  
                                if(err){
                                    callback(err);
                                }
                                var dataset=[]
                                for (var i = 0; i < bookingDetails.length; i++) {
                                    var setdata= {};
                                    var book = bookingDetails[i].booking_date;
                                    var booking_time = bookingDetails[i].booking_timings;
                                    var res = booking_time.split(":");
                                    var d = new Date(book);
                                    d.setHours(res[0]);
                                    d.setMinutes(res[1]);
                                    // console.log('time', d.getDate(),d.getDay(),d.getFullYear(),res[0],d.getMinutes(),d.getHours());
                                    // console.log('set dte', d.toLocaleTimeString());
                                    if(now>d){
                                        console.log(d +'is greater')
                                    }else{
                                        console.log(d +'is not greater')
                                        console.log('status', bookingDetails[i].status);
                                        setdata['avail']=bookingDetails[i];
                                        //setdata['avail']['doctor_status']=  bookingDetails[i].status;
                                        setdata['booking_status']= 'booked';
                                    }
                                    dataset.push(setdata)
                                }
                                callback(null, dataset);                    
                            });
                        }
                    }, 
                    /**
                    * Rating reviews
                    */
                    ratingReviews: function (userid, to_id, callback) {  
                        var avg_rating = 0;
                        var allData =[];       
                        async.waterfall([
                            reviews 
                        ], function (error, response) {
                            if(error){
                                //callback                                
                                callback({success: false, message:error});
                            }else{  
                                //callback                                  
                                callback({success: true,  data:response});
                            }
                        });
                        function reviews (callback) {
                            Rating.find({to_id: to_id})
                            .populate({
                                'path': 'from_id',
                                'select': 'name profile_pic'
                            })
                            .exec(function(err, ratings){
                                if(err){
                                    callback(err);
                                }                          
                                callback(null, ratings);           
                            });                
                        }
                    },
                    /**
                    * Export excel
                    */
                    exportExcel: function (userid, userRole, reqData, callback) {
                        console.log('userRole', userRole); 
                        var allBookings = [];    
                        var reqType = reqData.type;
                        var fromDate = reqData.from_date;
                        var toDate = reqData.to_date;
                        var startdate = new Date(fromDate);   
                        var enddate = new Date(toDate);
                        var now = new Date();
                        var today = new Date(Date.UTC(now.getUTCFullYear(), now.getUTCMonth(), now.getUTCDate()));
                        var start_date_count = new Date(Date.UTC(startdate.getUTCFullYear(), startdate.getUTCMonth(), startdate.getUTCDate()));
                        var end_date_count = new Date(Date.UTC(enddate.getUTCFullYear(), enddate.getUTCMonth(), enddate.getUTCDate()));
                        async.waterfall([
                            bookingDetails,
                            csvDownload,
                            email 
                        ], function (error, message, response) {
                            if(error){
                                //callback                                
                                callback({success: false, message:error});
                            }else{  
                                //callback                                  
                                callback({success: true, message:message, data:response});
                            }
                        });
                        function bookingDetails (callback) {
                            if(reqType == 'new_booking'){
                                var cond = {$and:[{booking_date: {$gte: today}}, {$or:[{$and:[{status:'pending'},{added_by_status:'patient'}]},{$and:[{status:'rescheduled'},{added_by_status:'patient'}]}]}]};
                            }
                            if(reqType == 'upcoming_appionment'){
                                var cond = {$and:[{booking_date: {$gte: today}}, {$or:[{$and:[{status:'accept'}, {added_by_status:'doctor'}]},{$and:[{status:'rescheduled'}, {added_by_status:'doctor'}]}, {$and:[{status:'accept'}, {added_by_status:'clinic'}]}, {$and:[{status:'rescheduled'}, {added_by_status:'clinic'}]}, {$and:[{status:'accept'}, {added_by_status:'patient'}]}]}]};
                            } 
                            if(reqType == 'appointment_history'){
                                var cond = {$and:[{$or:[{$and:[{status:'accept'}, {added_by_status:'doctor'}]},{$and:[{status:'rescheduled'}, {added_by_status:'doctor'}]}, {$and:[{status:'accept'}, {added_by_status:'clinic'}]}, {$and:[{status:'rescheduled'}, {added_by_status:'clinic'}]}, {$and:[{status:'accept'}, {added_by_status:'patient'}]}]}]};
                            }
                            if(reqType == 'patient_info_and_report'){
                                var cond = {};
                            }
                            var sort_field = 'booking_date';
                            var order = '1';   //decending 
                            console.log('start_date_count', start_date_count);
                            console.log('end_date_count', end_date_count);
                            if(userRole == 'doctor'){
                                var cond1 = {doctor_clinic_id: userid};
                            }
                            if(userRole == 'patient'){
                                var cond1 = {patient_id: userid};
                            }
                            if(userRole == 'clinic'){
                                var cond1 = {doctor_clinic_id: userid};
                            }
                            console.log('cond', cond);
                            console.log('cond1', cond1);
                            Booking.find(cond)
                            .where(cond1)
                            .where({booking_date: {'$gte':start_date_count}})
                            .where({booking_date: {'$lte':end_date_count}})
                            .populate({
                                'path': 'patient_id',
                                'select': 'name email mobile'
                            })
                            .sort([[sort_field, order]])
                            .exec(function(err, res){
                                if(err){
                                    callback(err);
                                } 
                                console.log('res', res);
                                if(res.length > 0){
                                    asyncLoop(res, function (item, next){
                                        if(item!='' || item != null || item != undefined){
                                            console.log('item', item);
                                            var bookData = {id:item.patient_id._id, name:item.patient_id.name, email:item.patient_id.email, mobile:item.patient_id.mobile, booking_date:item.booking_date, booking_timings:item.booking_timings}
                                            allBookings.push(bookData);
                                            next();
                                        }    
                                    }, function (){
                                        //console.log('allBookings', allBookings);
                                        callback(null, allBookings);
                                    });
                                }else{
                                    callback('No data found');    
                                }  
                            });
                        }  
                        function csvDownload (allBookings, callback) {
                            //console.log('allBookings', allBookings);
                            var fields = ['id', 'name', 'email', 'mobile', 'booking_date', 'booking_timings'];
                            var json2csvParser = new Json2csvParser({ fields });
                            var csv = json2csvParser.parse(allBookings);
                            //console.log('json2csvParser', json2csvParser);
                            //console.log('csv', csv);
                            var file_name =  Date.now() + reqType +'download.csv';
                            var path = 'public/csv/' + file_name;
                            fs.writeFile(path, csv, function(err) {
                                if (err) throw err;
                                console.log('file saved');
                                var url = config.BASE_URL + 'csv/'+ file_name
                                callback(null, url);
                            });           
                        }
                        function email (url, callback) {
                            var excel_type = '';
                            if(reqType == 'new_booking'){
                                excel_type = 'New booking';
                            }
                            if(reqType == 'upcoming_appionment'){
                                excel_type = 'Upcoming appionment';
                            }
                            if(reqType == 'appointment_history'){
                                excel_type = 'Appointment history';
                            }
                            if(reqType == 'patient_info_and_report'){
                                excel_type = 'Patient info and report';
                            }
                            var message = 'File has been sent to your mail. Check your mail to download excel. If mail is not in your inbox then check your spam folder.';
                            User.findById(userid)
                            .select('name email')
                            .exec(function(err, res){
                                var mailArray = [
                                    {
                                        email_id:res.email,
                                        subject: excel_type + ' Excel - Aqare App',
                                        mailContent:'Hi '+res.name+', <br><br>Please click the below given link to download. <br><br>'+url
                                    }
                                ];
                                sendMailToMultipleUsers(mailArray);
                                callback(null, message, url);
                            });  
                        }
                    },
                    /**
                    * Consult Patients
                    */
                    consultPatients: function (userid, pageno, callback) {  
                        var page = (pageno)?parseInt(pageno):1;
                        var limit = 15;        
                        var filtered_array = []; 
                        var allBookingArray = [];           
                        async.waterfall([
                            bookingDetails 
                        ], function (error, response) {
                            if(error){
                                //callback                                
                                callback({success: false, message:error});
                            }else{  
                                //callback                                  
                                callback({success: true,  data:response});
                            }
                        });
                        function bookingDetails (callback) {
                            Booking.find({doctor_clinic_id: userid})
                            .distinct('patient_id')                    
                            .exec(function(err, bookingDetails){
                                if(err){
                                    callback(err);
                                } 
                                if(bookingDetails){ 
                                    asyncLoop(bookingDetails,function(item,next){
                                        if(item){
                                            Booking.find({patient_id:item,doctor_clinic_id:userid})
                                            .exec(function (err, all_bookings){
                                                if(all_bookings){
                                                    User.findById(item,function(err_u,user_details){
                                                        if(user_details){                                               
                                                            var newInnerObject = {                                
                                                                all_bookings:all_bookings,
                                                                user_details:user_details
                                                            };
                                                            allBookingArray.push(newInnerObject);                                     
                                                        }
                                                        next();
                                                    });
                                                }else{
                                                    next();
                                                }
                                            });
                                        }else{
                                            next();
                                        }
                                    },function(){
                                        var total_post = page * limit;
                                        if(allBookingArray.length >0){                                
                                            for (var i = 0; i < allBookingArray.length; i++ ){
                                                if(i<total_post){
                                                    filtered_array.push(allBookingArray[i]);
                                                }
                                            }
                                            callback(null, filtered_array);    
                                        }else{
                                            callback(null, filtered_array);
                                        }
                                    });
                                }          
                            });                
                        }
                    }
                };
                module.exports = UserMethods;